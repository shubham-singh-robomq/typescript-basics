{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TypeScript Basics Guide","text":"<p>Welcome to the TypeScript Basics Guide! This comprehensive documentation is designed to help beginners understand and master TypeScript, a powerful typed superset of JavaScript.</p>"},{"location":"#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale. It adds optional static typing to JavaScript, which helps catch errors early and provides better tooling support.</p>"},{"location":"#why-learn-typescript","title":"Why Learn TypeScript?","text":"<ul> <li>Type Safety: Catch errors during development rather than at runtime</li> <li>Better IDE Support: Get better autocompletion, refactoring, and documentation</li> <li>Improved Maintainability: Make your code more maintainable and easier to understand</li> <li>Modern JavaScript Features: Use the latest JavaScript features while maintaining compatibility</li> <li>Growing Ecosystem: Access to a vast ecosystem of tools and libraries</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin your TypeScript journey, check out our Getting Started section. We'll guide you through:</p> <ol> <li>Setting up your development environment</li> <li>Writing your first TypeScript program</li> <li>Understanding basic concepts and syntax</li> </ol>"},{"location":"#topics-covered","title":"Topics Covered","text":"<p>Our guide covers all essential TypeScript topics:</p> <ul> <li>Basics: Types, Variables, Functions</li> <li>Advanced Concepts: Classes, Interfaces, Generics, Modules</li> <li>Best Practices: Type Safety, Code Organization, Common Patterns</li> </ul>"},{"location":"#how-to-use-this-guide","title":"How to Use This Guide","text":"<ol> <li>Start with the Introduction if you're new to TypeScript</li> <li>Follow the sections in order for a structured learning path</li> <li>Use the search functionality to find specific topics</li> <li>Try out the examples in your own development environment</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to improve this guide! If you find any issues or have suggestions, please feel free to:</p> <ol> <li>Open an issue</li> <li>Submit a pull request</li> <li>Share your feedback</li> </ol> <p>Happy coding! \ud83d\ude80 </p>"},{"location":"advanced/advanced-types/","title":"Advanced Types in TypeScript","text":"<p>This guide covers advanced type features in TypeScript that help you create more precise and flexible type definitions.</p>"},{"location":"advanced/advanced-types/#union-types","title":"Union Types","text":"<p>Union types allow a value to be one of several types:</p> <pre><code>type Status = 'active' | 'inactive' | 'pending';\ntype ID = string | number;\n\nfunction processId(id: ID) {\n    if (typeof id === 'string') {\n        return id.toUpperCase();\n    }\n    return id.toString();\n}\n</code></pre>"},{"location":"advanced/advanced-types/#intersection-types","title":"Intersection Types","text":"<p>Intersection types combine multiple types into one:</p> <pre><code>interface Person {\n    name: string;\n    age: number;\n}\n\ninterface Employee {\n    employeeId: string;\n    department: string;\n}\n\ntype EmployeePerson = Person &amp; Employee;\n\nconst john: EmployeePerson = {\n    name: 'John',\n    age: 30,\n    employeeId: 'E123',\n    department: 'Engineering'\n};\n</code></pre>"},{"location":"advanced/advanced-types/#type-guards","title":"Type Guards","text":"<p>Type guards help narrow down types within conditional blocks:</p> <pre><code>function isString(value: unknown): value is string {\n    return typeof value === 'string';\n}\n\nfunction processValue(value: string | number) {\n    if (isString(value)) {\n        return value.toUpperCase();\n    }\n    return value.toFixed(2);\n}\n</code></pre>"},{"location":"advanced/advanced-types/#mapped-types","title":"Mapped Types","text":"<p>Mapped types create new types by transforming properties of existing types:</p> <pre><code>type Readonly&lt;T&gt; = {\n    readonly [P in keyof T]: T[P];\n};\n\ntype Optional&lt;T&gt; = {\n    [P in keyof T]?: T[P];\n};\n\ninterface User {\n    name: string;\n    age: number;\n}\n\ntype ReadonlyUser = Readonly&lt;User&gt;;\ntype OptionalUser = Optional&lt;User&gt;;\n</code></pre>"},{"location":"advanced/advanced-types/#conditional-types","title":"Conditional Types","text":"<p>Conditional types select one of two possible types based on a condition:</p> <pre><code>type NonNullable&lt;T&gt; = T extends null | undefined ? never : T;\n\ntype StringOrNumber&lt;T&gt; = T extends string ? string : number;\n\ntype Result1 = StringOrNumber&lt;string&gt;;  // string\ntype Result2 = StringOrNumber&lt;boolean&gt;; // number\n</code></pre>"},{"location":"advanced/advanced-types/#utility-types","title":"Utility Types","text":"<p>TypeScript provides several built-in utility types:</p> <pre><code>// Partial&lt;T&gt; - Makes all properties optional\ntype PartialUser = Partial&lt;User&gt;;\n\n// Required&lt;T&gt; - Makes all properties required\ntype RequiredUser = Required&lt;PartialUser&gt;;\n\n// Pick&lt;T, K&gt; - Selects specific properties\ntype UserName = Pick&lt;User, 'name'&gt;;\n\n// Omit&lt;T, K&gt; - Removes specific properties\ntype UserWithoutAge = Omit&lt;User, 'age'&gt;;\n\n// Record&lt;K, T&gt; - Creates an object type with specified keys and value type\ntype UserMap = Record&lt;string, User&gt;;\n</code></pre>"},{"location":"advanced/advanced-types/#template-literal-types","title":"Template Literal Types","text":"<p>Template literal types allow you to create types based on string patterns:</p> <pre><code>type CSSUnit = 'px' | 'em' | 'rem' | '%';\ntype CSSValue = `${number}${CSSUnit}`;\n\nconst width: CSSValue = '100px';  // Valid\nconst height: CSSValue = '2em';   // Valid\nconst margin: CSSValue = '50%';   // Valid\n</code></pre>"},{"location":"advanced/advanced-types/#index-signatures","title":"Index Signatures","text":"<p>Index signatures allow you to define the types of properties that aren't known at compile time:</p> <pre><code>interface StringArray {\n    [index: number]: string;\n}\n\nconst arr: StringArray = ['a', 'b', 'c'];\n\ninterface Dictionary {\n    [key: string]: number;\n}\n\nconst dict: Dictionary = {\n    'one': 1,\n    'two': 2\n};\n</code></pre>"},{"location":"advanced/classes/","title":"Classes in TypeScript","text":"<p>TypeScript's class system is based on ES6 classes with additional type annotations and features. This guide covers how to define and use classes in TypeScript.</p>"},{"location":"advanced/classes/#basic-class-syntax","title":"Basic Class Syntax","text":"<pre><code>class Person {\n    name: string;\n    age: number;\n\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n\n    greet(): string {\n        return `Hello, my name is ${this.name} and I am ${this.age} years old.`;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#access-modifiers","title":"Access Modifiers","text":""},{"location":"advanced/classes/#public-default","title":"Public (default)","text":"<pre><code>class Person {\n    public name: string;\n    public age: number;\n}\n</code></pre>"},{"location":"advanced/classes/#private","title":"Private","text":"<pre><code>class Person {\n    private name: string;\n    private age: number;\n}\n</code></pre>"},{"location":"advanced/classes/#protected","title":"Protected","text":"<pre><code>class Person {\n    protected name: string;\n    protected age: number;\n}\n</code></pre>"},{"location":"advanced/classes/#readonly-properties","title":"Readonly Properties","text":"<pre><code>class Person {\n    readonly name: string;\n    readonly age: number;\n}\n</code></pre>"},{"location":"advanced/classes/#static-members","title":"Static Members","text":"<pre><code>class MathHelper {\n    static PI: number = 3.14159;\n\n    static calculateArea(radius: number): number {\n        return this.PI * radius * radius;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#inheritance","title":"Inheritance","text":"<pre><code>class Animal {\n    constructor(public name: string) {}\n\n    move(distance: number = 0): void {\n        console.log(`${this.name} moved ${distance}m.`);\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name: string) {\n        super(name);\n    }\n\n    bark(): void {\n        console.log('Woof! Woof!');\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#abstract-classes","title":"Abstract Classes","text":"<pre><code>abstract class Animal {\n    abstract makeSound(): void;\n\n    move(): void {\n        console.log('Moving...');\n    }\n}\n\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log('Woof!');\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#interfaces-with-classes","title":"Interfaces with Classes","text":"<pre><code>interface IPerson {\n    name: string;\n    age: number;\n    greet(): string;\n}\n\nclass Person implements IPerson {\n    constructor(public name: string, public age: number) {}\n\n    greet(): string {\n        return `Hello, my name is ${this.name}`;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#getters-and-setters","title":"Getters and Setters","text":"<pre><code>class Person {\n    private _age: number;\n\n    get age(): number {\n        return this._age;\n    }\n\n    set age(value: number) {\n        if (value &lt; 0) {\n            throw new Error('Age cannot be negative');\n        }\n        this._age = value;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#class-decorators","title":"Class Decorators","text":"<pre><code>function sealed(constructor: Function) {\n    Object.seal(constructor);\n    Object.seal(constructor.prototype);\n}\n\n@sealed\nclass Person {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#method-decorators","title":"Method Decorators","text":"<pre><code>function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args: any[]) {\n        console.log(`Calling ${propertyKey} with args:`, args);\n        return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n}\n\nclass Calculator {\n    @log\n    add(x: number, y: number): number {\n        return x + y;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#property-decorators","title":"Property Decorators","text":"<pre><code>function format(formatString: string) {\n    return function(target: any, propertyKey: string) {\n        let value = target[propertyKey];\n\n        const getter = function() {\n            return value;\n        };\n\n        const setter = function(newVal: string) {\n            value = formatString.replace('%s', newVal);\n        };\n\n        Object.defineProperty(target, propertyKey, {\n            get: getter,\n            set: setter,\n            enumerable: true,\n            configurable: true\n        });\n    };\n}\n\nclass Person {\n    @format('Hello, %s!')\n    greeting: string;\n}\n</code></pre>"},{"location":"advanced/classes/#best-practices","title":"Best Practices","text":"<ol> <li>Use access modifiers: Explicitly declare public, private, or protected</li> <li>Use readonly: For properties that shouldn't change after initialization</li> <li>Use interfaces: To define contracts for classes</li> <li>Use abstract classes: For base classes with common functionality</li> <li>Use decorators: For cross-cutting concerns</li> <li>Use getters/setters: For computed properties or validation</li> <li>Use static members: For utility methods and constants</li> </ol>"},{"location":"advanced/classes/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/classes/#singleton-pattern","title":"Singleton Pattern","text":"<pre><code>class Singleton {\n    private static instance: Singleton;\n    private constructor() {}\n\n    static getInstance(): Singleton {\n        if (!Singleton.instance) {\n            Singleton.instance = new Singleton();\n        }\n        return Singleton.instance;\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#factory-pattern","title":"Factory Pattern","text":"<pre><code>interface Animal {\n    makeSound(): void;\n}\n\nclass Dog implements Animal {\n    makeSound(): void {\n        console.log('Woof!');\n    }\n}\n\nclass Cat implements Animal {\n    makeSound(): void {\n        console.log('Meow!');\n    }\n}\n\nclass AnimalFactory {\n    static createAnimal(type: 'dog' | 'cat'): Animal {\n        switch (type) {\n            case 'dog':\n                return new Dog();\n            case 'cat':\n                return new Cat();\n            default:\n                throw new Error('Invalid animal type');\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#observer-pattern","title":"Observer Pattern","text":"<pre><code>interface Observer {\n    update(data: any): void;\n}\n\nclass Subject {\n    private observers: Observer[] = [];\n\n    addObserver(observer: Observer): void {\n        this.observers.push(observer);\n    }\n\n    notifyObservers(data: any): void {\n        this.observers.forEach(observer =&gt; observer.update(data));\n    }\n}\n</code></pre>"},{"location":"advanced/classes/#next-steps","title":"Next Steps","text":"<p>Now that you understand classes, you can learn about: - Interfaces - Generics - Modules </p>"},{"location":"advanced/configuration/","title":"TypeScript Configuration","text":"<p>This guide covers the essential configuration options in TypeScript and how to use them effectively.</p>"},{"location":"advanced/configuration/#tsconfigjson","title":"tsconfig.json","text":"<p>The <code>tsconfig.json</code> file is the main configuration file for TypeScript projects. It specifies the root files and compiler options.</p>"},{"location":"advanced/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n</code></pre>"},{"location":"advanced/configuration/#key-compiler-options","title":"Key Compiler Options","text":""},{"location":"advanced/configuration/#target-and-module","title":"Target and Module","text":"<ul> <li><code>target</code>: Specifies the ECMAScript target version (e.g., \"ES5\", \"ES2015\", \"ES2020\")</li> <li><code>module</code>: Specifies the module system (e.g., \"commonjs\", \"es2015\", \"esnext\")</li> </ul>"},{"location":"advanced/configuration/#strict-type-checking","title":"Strict Type Checking","text":"<ul> <li><code>strict</code>: Enables all strict type checking options</li> <li><code>noImplicitAny</code>: Raises error on expressions and declarations with an implied 'any' type</li> <li><code>strictNullChecks</code>: Makes handling of null and undefined more explicit</li> <li><code>strictFunctionTypes</code>: Enables stricter checking of function types</li> </ul>"},{"location":"advanced/configuration/#module-resolution","title":"Module Resolution","text":"<ul> <li><code>baseUrl</code>: Base directory to resolve non-relative module names</li> <li><code>paths</code>: A series of entries which re-map imports to lookup locations</li> <li><code>moduleResolution</code>: Specifies module resolution strategy (\"node\" or \"classic\")</li> </ul>"},{"location":"advanced/configuration/#output-configuration","title":"Output Configuration","text":"<ul> <li><code>outDir</code>: Redirect output structure to the directory</li> <li><code>rootDir</code>: Specifies the root directory of input files</li> <li><code>declaration</code>: Generates corresponding '.d.ts' file</li> </ul>"},{"location":"advanced/configuration/#advanced-configuration-options","title":"Advanced Configuration Options","text":""},{"location":"advanced/configuration/#type-checking","title":"Type Checking","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  }\n}\n</code></pre>"},{"location":"advanced/configuration/#source-maps","title":"Source Maps","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    \"inlineSourceMap\": true,\n    \"inlineSources\": true\n  }\n}\n</code></pre>"},{"location":"advanced/configuration/#experimental-features","title":"Experimental Features","text":"<pre><code>{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"useDefineForClassFields\": true\n  }\n}\n</code></pre>"},{"location":"advanced/configuration/#project-references","title":"Project References","text":"<p>TypeScript supports project references for better organization of large codebases:</p> <pre><code>{\n  \"references\": [\n    { \"path\": \"./shared\" },\n    { \"path\": \"./webapp\" }\n  ]\n}\n</code></pre>"},{"location":"advanced/configuration/#watch-mode","title":"Watch Mode","text":"<p>Enable watch mode for development:</p> <pre><code>{\n  \"watchOptions\": {\n    \"watchFile\": \"useFsEvents\",\n    \"watchDirectory\": \"useFsEvents\",\n    \"fallbackPolling\": \"dynamicPriority\"\n  }\n}\n</code></pre>"},{"location":"advanced/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Always enable <code>strict</code> mode for better type safety</li> <li>Use <code>baseUrl</code> and <code>paths</code> for cleaner imports</li> <li>Configure <code>outDir</code> to separate compiled code from source</li> <li>Use project references for large codebases</li> <li>Enable source maps for debugging</li> <li>Configure appropriate <code>target</code> and <code>module</code> settings for your environment</li> </ol>"},{"location":"advanced/decorators/","title":"TypeScript Decorators","text":"<p>Decorators are a special kind of declaration that can be attached to classes, methods, accessors, properties, or parameters. They use the form <code>@expression</code>, where <code>expression</code> must evaluate to a function that will be called at runtime.</p>"},{"location":"advanced/decorators/#enabling-decorators","title":"Enabling Decorators","text":"<p>To use decorators, you need to enable them in your <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n</code></pre>"},{"location":"advanced/decorators/#class-decorators","title":"Class Decorators","text":"<p>Class decorators are applied to the constructor of a class:</p> <pre><code>function sealed(constructor: Function) {\n    Object.seal(constructor);\n    Object.seal(constructor.prototype);\n}\n\n@sealed\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n</code></pre>"},{"location":"advanced/decorators/#method-decorators","title":"Method Decorators","text":"<p>Method decorators are applied to method definitions:</p> <pre><code>function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args: any[]) {\n        console.log(`Calling ${propertyKey} with args:`, args);\n        const result = originalMethod.apply(this, args);\n        console.log(`Result:`, result);\n        return result;\n    };\n\n    return descriptor;\n}\n\nclass Calculator {\n    @log\n    add(a: number, b: number): number {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"advanced/decorators/#property-decorators","title":"Property Decorators","text":"<p>Property decorators are applied to property declarations:</p> <pre><code>function format(formatString: string) {\n    return function (target: any, propertyKey: string) {\n        let value = target[propertyKey];\n\n        const getter = function() {\n            return value;\n        };\n\n        const setter = function(newVal: string) {\n            value = formatString.replace('%s', newVal);\n        };\n\n        Object.defineProperty(target, propertyKey, {\n            get: getter,\n            set: setter,\n            enumerable: true,\n            configurable: true\n        });\n    };\n}\n\nclass Message {\n    @format('Hello, %s!')\n    greeting: string;\n}\n</code></pre>"},{"location":"advanced/decorators/#parameter-decorators","title":"Parameter Decorators","text":"<p>Parameter decorators are applied to parameter declarations:</p> <pre><code>function validate(target: any, propertyKey: string, parameterIndex: number) {\n    const existingRequiredParameters: number[] = Reflect.getOwnMetadata('required', target, propertyKey) || [];\n    existingRequiredParameters.push(parameterIndex);\n    Reflect.defineMetadata('required', existingRequiredParameters, target, propertyKey);\n}\n\nclass User {\n    save(@validate name: string, @validate age: number) {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"advanced/decorators/#accessor-decorators","title":"Accessor Decorators","text":"<p>Accessor decorators are applied to property accessors:</p> <pre><code>function configurable(value: boolean) {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        descriptor.configurable = value;\n    };\n}\n\nclass Point {\n    private _x: number;\n    private _y: number;\n\n    constructor(x: number, y: number) {\n        this._x = x;\n        this._y = y;\n    }\n\n    @configurable(false)\n    get x() { return this._x; }\n\n    @configurable(false)\n    get y() { return this._y; }\n}\n</code></pre>"},{"location":"advanced/decorators/#decorator-factories","title":"Decorator Factories","text":"<p>Decorator factories are functions that return decorator functions:</p> <pre><code>function color(value: string) {\n    return function (target: any) {\n        // do something with 'target' and 'value'...\n    };\n}\n\n@color('red')\nclass Car {\n    // ...\n}\n</code></pre>"},{"location":"advanced/decorators/#metadata-reflection","title":"Metadata Reflection","text":"<p>TypeScript supports emitting type metadata for decorators:</p> <pre><code>import 'reflect-metadata';\n\nconst formatMetadataKey = Symbol('format');\n\nfunction format(formatString: string) {\n    return Reflect.metadata(formatMetadataKey, formatString);\n}\n\nfunction getFormat(target: any, propertyKey: string) {\n    return Reflect.getMetadata(formatMetadataKey, target, propertyKey);\n}\n\nclass Greeter {\n    @format('Hello, %s')\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    greet() {\n        const formatString = getFormat(this, 'greeting');\n        return formatString.replace('%s', this.greeting);\n    }\n}\n</code></pre>"},{"location":"advanced/decorators/#best-practices","title":"Best Practices","text":"<ol> <li>Use decorators sparingly and only when they provide clear benefits</li> <li>Keep decorator logic simple and focused</li> <li>Document decorator behavior clearly</li> <li>Consider using decorator factories for more flexibility</li> <li>Be aware of the performance implications of decorators</li> <li>Use metadata reflection when you need to access type information at runtime</li> </ol>"},{"location":"advanced/generics/","title":"Generics in TypeScript","text":"<p>Generics allow you to create reusable components that can work with a variety of types rather than a single one. This guide covers how to use generics in TypeScript.</p>"},{"location":"advanced/generics/#basic-generic-functions","title":"Basic Generic Functions","text":"<pre><code>function identity&lt;T&gt;(arg: T): T {\n    return arg;\n}\n\nlet output = identity&lt;string&gt;(\"myString\");\nlet output2 = identity(\"myString\"); // Type inference\n</code></pre>"},{"location":"advanced/generics/#generic-interfaces","title":"Generic Interfaces","text":"<pre><code>interface GenericIdentityFn&lt;T&gt; {\n    (arg: T): T;\n}\n\nfunction identity&lt;T&gt;(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn&lt;number&gt; = identity;\n</code></pre>"},{"location":"advanced/generics/#generic-classes","title":"Generic Classes","text":"<pre><code>class GenericNumber&lt;T&gt; {\n    zeroValue: T;\n    add: (x: T, y: T) =&gt; T;\n}\n\nlet myGenericNumber = new GenericNumber&lt;number&gt;();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n</code></pre>"},{"location":"advanced/generics/#generic-constraints","title":"Generic Constraints","text":"<pre><code>interface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n</code></pre>"},{"location":"advanced/generics/#using-type-parameters-in-generic-constraints","title":"Using Type Parameters in Generic Constraints","text":"<pre><code>function getProperty&lt;T, K extends keyof T&gt;(obj: T, key: K) {\n    return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\ngetProperty(x, \"a\");\ngetProperty(x, \"m\"); // Error\n</code></pre>"},{"location":"advanced/generics/#generic-classes-with-constraints","title":"Generic Classes with Constraints","text":"<pre><code>class BeeKeeper {\n    hasMask: boolean = true;\n}\n\nclass ZooKeeper {\n    nametag: string = \"Mikle\";\n}\n\nclass Animal {\n    numLegs: number = 4;\n}\n\nclass Bee extends Animal {\n    keeper: BeeKeeper = new BeeKeeper();\n}\n\nclass Lion extends Animal {\n    keeper: ZooKeeper = new ZooKeeper();\n}\n\nfunction createInstance&lt;A extends Animal&gt;(c: new () =&gt; A): A {\n    return new c();\n}\n\ncreateInstance(Lion).keeper.nametag;\ncreateInstance(Bee).keeper.hasMask;\n</code></pre>"},{"location":"advanced/generics/#generic-utility-types","title":"Generic Utility Types","text":""},{"location":"advanced/generics/#partial","title":"Partial","text":"<pre><code>interface Todo {\n    title: string;\n    description: string;\n}\n\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) {\n    return { ...todo, ...fieldsToUpdate };\n}\n</code></pre>"},{"location":"advanced/generics/#readonly","title":"Readonly","text":"<pre><code>interface Todo {\n    title: string;\n}\n\nconst todo: Readonly&lt;Todo&gt; = {\n    title: \"Delete inactive users\",\n};\n\ntodo.title = \"Hello\"; // Error\n</code></pre>"},{"location":"advanced/generics/#record","title":"Record","text":"<pre><code>interface PageInfo {\n    title: string;\n}\n\ntype Page = \"home\" | \"about\" | \"contact\";\n\nconst nav: Record&lt;Page, PageInfo&gt; = {\n    about: { title: \"about\" },\n    contact: { title: \"contact\" },\n    home: { title: \"home\" },\n};\n</code></pre>"},{"location":"advanced/generics/#pick","title":"Pick","text":"<pre><code>interface Todo {\n    title: string;\n    description: string;\n    completed: boolean;\n}\n\ntype TodoPreview = Pick&lt;Todo, \"title\" | \"completed\"&gt;;\n\nconst todo: TodoPreview = {\n    title: \"Clean room\",\n    completed: false,\n};\n</code></pre>"},{"location":"advanced/generics/#omit","title":"Omit","text":"<pre><code>interface Todo {\n    title: string;\n    description: string;\n    completed: boolean;\n}\n\ntype TodoPreview = Omit&lt;Todo, \"description\"&gt;;\n\nconst todo: TodoPreview = {\n    title: \"Clean room\",\n    completed: false,\n};\n</code></pre>"},{"location":"advanced/generics/#best-practices","title":"Best Practices","text":"<ol> <li>Use generics for reusable components: When you need to work with multiple types</li> <li>Use constraints: To limit the types that can be used with generics</li> <li>Use type inference: When possible, let TypeScript infer generic types</li> <li>Use utility types: For common type transformations</li> <li>Document generic types: Add comments explaining the purpose of generic parameters</li> </ol>"},{"location":"advanced/generics/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/generics/#generic-repository-pattern","title":"Generic Repository Pattern","text":"<pre><code>interface Repository&lt;T&gt; {\n    findById(id: string): Promise&lt;T&gt;;\n    findAll(): Promise&lt;T[]&gt;;\n    save(entity: T): Promise&lt;void&gt;;\n    delete(id: string): Promise&lt;void&gt;;\n}\n\nclass UserRepository implements Repository&lt;User&gt; {\n    async findById(id: string): Promise&lt;User&gt; {\n        // Implementation\n    }\n    // ... other methods\n}\n</code></pre>"},{"location":"advanced/generics/#generic-factory-pattern","title":"Generic Factory Pattern","text":"<pre><code>interface Factory&lt;T&gt; {\n    create(): T;\n}\n\nclass CarFactory implements Factory&lt;Car&gt; {\n    create(): Car {\n        return new Car();\n    }\n}\n\nclass BikeFactory implements Factory&lt;Bike&gt; {\n    create(): Bike {\n        return new Bike();\n    }\n}\n</code></pre>"},{"location":"advanced/generics/#generic-builder-pattern","title":"Generic Builder Pattern","text":"<pre><code>class Builder&lt;T&gt; {\n    private value: Partial&lt;T&gt; = {};\n\n    set&lt;K extends keyof T&gt;(key: K, value: T[K]): this {\n        this.value[key] = value;\n        return this;\n    }\n\n    build(): T {\n        return this.value as T;\n    }\n}\n\ninterface User {\n    name: string;\n    age: number;\n    email: string;\n}\n\nconst user = new Builder&lt;User&gt;()\n    .set(\"name\", \"John\")\n    .set(\"age\", 30)\n    .set(\"email\", \"john@example.com\")\n    .build();\n</code></pre>"},{"location":"advanced/generics/#next-steps","title":"Next Steps","text":"<p>Now that you understand generics, you can learn about: - Modules - Advanced Types - Decorators </p>"},{"location":"advanced/interfaces/","title":"Interfaces in TypeScript","text":"<p>Interfaces in TypeScript are powerful tools for defining contracts within your code and with external code. This guide covers how to define and use interfaces in TypeScript.</p>"},{"location":"advanced/interfaces/#basic-interface-syntax","title":"Basic Interface Syntax","text":"<pre><code>interface Person {\n    name: string;\n    age: number;\n    greet(): string;\n}\n</code></pre>"},{"location":"advanced/interfaces/#optional-properties","title":"Optional Properties","text":"<pre><code>interface Person {\n    name: string;\n    age?: number;  // Optional property\n}\n</code></pre>"},{"location":"advanced/interfaces/#readonly-properties","title":"Readonly Properties","text":"<pre><code>interface Point {\n    readonly x: number;\n    readonly y: number;\n}\n</code></pre>"},{"location":"advanced/interfaces/#function-types","title":"Function Types","text":"<pre><code>interface SearchFunc {\n    (source: string, subString: string): boolean;\n}\n\nconst mySearch: SearchFunc = function(source: string, subString: string) {\n    return source.search(subString) &gt; -1;\n};\n</code></pre>"},{"location":"advanced/interfaces/#indexable-types","title":"Indexable Types","text":"<pre><code>interface StringArray {\n    [index: number]: string;\n}\n\nconst myArray: StringArray = [\"Bob\", \"Fred\"];\n</code></pre>"},{"location":"advanced/interfaces/#class-types","title":"Class Types","text":"<pre><code>interface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date): void;\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date = new Date();\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n}\n</code></pre>"},{"location":"advanced/interfaces/#extending-interfaces","title":"Extending Interfaces","text":"<pre><code>interface Shape {\n    color: string;\n}\n\ninterface Square extends Shape {\n    sideLength: number;\n}\n</code></pre>"},{"location":"advanced/interfaces/#hybrid-types","title":"Hybrid Types","text":"<pre><code>interface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): void;\n}\n\nfunction getCounter(): Counter {\n    let counter = function (start: number) { } as Counter;\n    counter.interval = 123;\n    counter.reset = function () { };\n    return counter;\n}\n</code></pre>"},{"location":"advanced/interfaces/#generic-interfaces","title":"Generic Interfaces","text":"<pre><code>interface GenericIdentityFn&lt;T&gt; {\n    (arg: T): T;\n}\n\nfunction identity&lt;T&gt;(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn&lt;number&gt; = identity;\n</code></pre>"},{"location":"advanced/interfaces/#interface-vs-type-alias","title":"Interface vs Type Alias","text":"<pre><code>// Interface\ninterface Point {\n    x: number;\n    y: number;\n}\n\n// Type Alias\ntype Point = {\n    x: number;\n    y: number;\n};\n</code></pre>"},{"location":"advanced/interfaces/#declaration-merging","title":"Declaration Merging","text":"<pre><code>interface Box {\n    height: number;\n    width: number;\n}\n\ninterface Box {\n    scale: number;\n}\n\nlet box: Box = { height: 5, width: 6, scale: 10 };\n</code></pre>"},{"location":"advanced/interfaces/#best-practices","title":"Best Practices","text":"<ol> <li>Use interfaces for object shapes: When defining the shape of objects</li> <li>Use type aliases for unions: When creating union types</li> <li>Use interfaces for class contracts: When defining class contracts</li> <li>Use interfaces for declaration merging: When you need to extend existing types</li> <li>Use interfaces for library definitions: When creating type definitions for libraries</li> </ol>"},{"location":"advanced/interfaces/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/interfaces/#factory-pattern-with-interfaces","title":"Factory Pattern with Interfaces","text":"<pre><code>interface Animal {\n    makeSound(): void;\n}\n\nclass Dog implements Animal {\n    makeSound(): void {\n        console.log('Woof!');\n    }\n}\n\nclass Cat implements Animal {\n    makeSound(): void {\n        console.log('Meow!');\n    }\n}\n\nfunction createAnimal(type: 'dog' | 'cat'): Animal {\n    switch (type) {\n        case 'dog':\n            return new Dog();\n        case 'cat':\n            return new Cat();\n        default:\n            throw new Error('Invalid animal type');\n    }\n}\n</code></pre>"},{"location":"advanced/interfaces/#strategy-pattern-with-interfaces","title":"Strategy Pattern with Interfaces","text":"<pre><code>interface PaymentStrategy {\n    pay(amount: number): void;\n}\n\nclass CreditCardPayment implements PaymentStrategy {\n    pay(amount: number): void {\n        console.log(`Paying ${amount} with credit card`);\n    }\n}\n\nclass PayPalPayment implements PaymentStrategy {\n    pay(amount: number): void {\n        console.log(`Paying ${amount} with PayPal`);\n    }\n}\n\nclass PaymentProcessor {\n    private strategy: PaymentStrategy;\n\n    constructor(strategy: PaymentStrategy) {\n        this.strategy = strategy;\n    }\n\n    processPayment(amount: number): void {\n        this.strategy.pay(amount);\n    }\n}\n</code></pre>"},{"location":"advanced/interfaces/#observer-pattern-with-interfaces","title":"Observer Pattern with Interfaces","text":"<pre><code>interface Observer {\n    update(data: any): void;\n}\n\ninterface Subject {\n    registerObserver(observer: Observer): void;\n    removeObserver(observer: Observer): void;\n    notifyObservers(): void;\n}\n\nclass WeatherStation implements Subject {\n    private observers: Observer[] = [];\n    private temperature: number = 0;\n\n    registerObserver(observer: Observer): void {\n        this.observers.push(observer);\n    }\n\n    removeObserver(observer: Observer): void {\n        const index = this.observers.indexOf(observer);\n        if (index &gt; -1) {\n            this.observers.splice(index, 1);\n        }\n    }\n\n    notifyObservers(): void {\n        this.observers.forEach(observer =&gt; observer.update(this.temperature));\n    }\n\n    setTemperature(temp: number): void {\n        this.temperature = temp;\n        this.notifyObservers();\n    }\n}\n</code></pre>"},{"location":"advanced/interfaces/#next-steps","title":"Next Steps","text":"<p>Now that you understand interfaces, you can learn about: - Generics - Modules - Advanced Types </p>"},{"location":"advanced/modules/","title":"Modules in TypeScript","text":"<p>TypeScript modules help you organize your code into reusable pieces. This guide covers how to use modules in TypeScript, including imports, exports, and module resolution.</p>"},{"location":"advanced/modules/#basic-module-syntax","title":"Basic Module Syntax","text":""},{"location":"advanced/modules/#exporting","title":"Exporting","text":"<pre><code>// math.ts\nexport function add(x: number, y: number): number {\n    return x + y;\n}\n\nexport const PI = 3.14;\n</code></pre>"},{"location":"advanced/modules/#importing","title":"Importing","text":"<pre><code>// app.ts\nimport { add, PI } from './math';\n\nconsole.log(add(2, 3)); // 5\nconsole.log(PI); // 3.14\n</code></pre>"},{"location":"advanced/modules/#default-exports","title":"Default Exports","text":"<pre><code>// Calculator.ts\nexport default class Calculator {\n    add(x: number, y: number): number {\n        return x + y;\n    }\n}\n\n// app.ts\nimport Calculator from './Calculator';\nconst calc = new Calculator();\n</code></pre>"},{"location":"advanced/modules/#namespace-imports","title":"Namespace Imports","text":"<pre><code>// math.ts\nexport namespace Math {\n    export function add(x: number, y: number): number {\n        return x + y;\n    }\n    export function subtract(x: number, y: number): number {\n        return x - y;\n    }\n}\n\n// app.ts\nimport { Math } from './math';\nconsole.log(Math.add(2, 3));\n</code></pre>"},{"location":"advanced/modules/#re-exporting","title":"Re-exporting","text":"<pre><code>// math.ts\nexport function add(x: number, y: number): number {\n    return x + y;\n}\n\n// index.ts\nexport * from './math';\n</code></pre>"},{"location":"advanced/modules/#module-resolution","title":"Module Resolution","text":""},{"location":"advanced/modules/#relative-vs-non-relative-imports","title":"Relative vs Non-relative Imports","text":"<pre><code>// Relative imports\nimport { X } from './moduleA';\nimport { Y } from '../moduleB';\n\n// Non-relative imports\nimport { Z } from 'moduleC';\n</code></pre>"},{"location":"advanced/modules/#module-formats","title":"Module Formats","text":""},{"location":"advanced/modules/#commonjs","title":"CommonJS","text":"<pre><code>// math.ts\nexport function add(x: number, y: number): number {\n    return x + y;\n}\n\n// Generated JavaScript\nexports.add = function(x, y) {\n    return x + y;\n};\n</code></pre>"},{"location":"advanced/modules/#es-modules","title":"ES Modules","text":"<pre><code>// math.ts\nexport function add(x: number, y: number): number {\n    return x + y;\n}\n\n// Generated JavaScript\nexport function add(x, y) {\n    return x + y;\n}\n</code></pre>"},{"location":"advanced/modules/#module-augmentation","title":"Module Augmentation","text":"<pre><code>// original-module.ts\nexport interface Point {\n    x: number;\n    y: number;\n}\n\n// augmentation.ts\nimport { Point } from './original-module';\n\ndeclare module './original-module' {\n    interface Point {\n        z: number;\n    }\n}\n\nconst point: Point = { x: 0, y: 0, z: 0 };\n</code></pre>"},{"location":"advanced/modules/#path-mapping","title":"Path Mapping","text":"<pre><code>// tsconfig.json\n{\n    \"compilerOptions\": {\n        \"baseUrl\": \".\",\n        \"paths\": {\n            \"*\": [\"node_modules/*\", \"src/types/*\"]\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/modules/#best-practices","title":"Best Practices","text":"<ol> <li>Use ES modules: Prefer ES modules over CommonJS</li> <li>Use relative paths: For imports within your project</li> <li>Use index files: For cleaner imports</li> <li>Use named exports: Instead of default exports when possible</li> <li>Use path aliases: For cleaner imports</li> <li>Use module augmentation: For extending third-party types</li> </ol>"},{"location":"advanced/modules/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/modules/#barrel-exports","title":"Barrel Exports","text":"<pre><code>// math/index.ts\nexport * from './add';\nexport * from './subtract';\nexport * from './multiply';\nexport * from './divide';\n</code></pre>"},{"location":"advanced/modules/#dynamic-imports","title":"Dynamic Imports","text":"<pre><code>async function loadModule() {\n    const module = await import('./math');\n    console.log(module.add(2, 3));\n}\n</code></pre>"},{"location":"advanced/modules/#module-aliasing","title":"Module Aliasing","text":"<pre><code>import { ReallyLongModuleName as ShortName } from './really-long-module-name';\n</code></pre>"},{"location":"advanced/modules/#module-organization","title":"Module Organization","text":""},{"location":"advanced/modules/#feature-based-organization","title":"Feature-based Organization","text":"<pre><code>src/\n  feature1/\n    components/\n    services/\n    types/\n    index.ts\n  feature2/\n    components/\n    services/\n    types/\n    index.ts\n</code></pre>"},{"location":"advanced/modules/#layer-based-organization","title":"Layer-based Organization","text":"<pre><code>src/\n  presentation/\n    components/\n    pages/\n  domain/\n    entities/\n    repositories/\n  infrastructure/\n    services/\n    api/\n</code></pre>"},{"location":"advanced/modules/#next-steps","title":"Next Steps","text":"<p>Now that you understand modules, you can learn about: - Advanced Types - Decorators - Configuration </p>"},{"location":"basics/functions/","title":"Functions in TypeScript","text":"<p>Functions are a fundamental building block in TypeScript. This guide covers how to define and use functions with TypeScript's type system.</p>"},{"location":"basics/functions/#basic-function-syntax","title":"Basic Function Syntax","text":"<pre><code>function greet(name: string): string {\n    return `Hello, ${name}!`;\n}\n</code></pre>"},{"location":"basics/functions/#function-types","title":"Function Types","text":""},{"location":"basics/functions/#named-functions","title":"Named Functions","text":"<pre><code>function add(x: number, y: number): number {\n    return x + y;\n}\n</code></pre>"},{"location":"basics/functions/#function-expressions","title":"Function Expressions","text":"<pre><code>const multiply = function(x: number, y: number): number {\n    return x * y;\n};\n</code></pre>"},{"location":"basics/functions/#arrow-functions","title":"Arrow Functions","text":"<pre><code>const divide = (x: number, y: number): number =&gt; x / y;\n</code></pre>"},{"location":"basics/functions/#optional-parameters","title":"Optional Parameters","text":"<pre><code>function buildName(firstName: string, lastName?: string): string {\n    return lastName ? `${firstName} ${lastName}` : firstName;\n}\n</code></pre>"},{"location":"basics/functions/#default-parameters","title":"Default Parameters","text":"<pre><code>function buildName(firstName: string, lastName: string = \"Smith\"): string {\n    return `${firstName} ${lastName}`;\n}\n</code></pre>"},{"location":"basics/functions/#rest-parameters","title":"Rest Parameters","text":"<pre><code>function sum(...numbers: number[]): number {\n    return numbers.reduce((a, b) =&gt; a + b, 0);\n}\n</code></pre>"},{"location":"basics/functions/#function-overloads","title":"Function Overloads","text":"<pre><code>function makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\n    if (d !== undefined &amp;&amp; y !== undefined) {\n        return new Date(y, mOrTimestamp, d);\n    } else {\n        return new Date(mOrTimestamp);\n    }\n}\n</code></pre>"},{"location":"basics/functions/#callback-functions","title":"Callback Functions","text":"<pre><code>function fetchData(callback: (data: string) =&gt; void): void {\n    // Simulate fetching data\n    setTimeout(() =&gt; {\n        callback(\"Data received\");\n    }, 1000);\n}\n\nfetchData((data) =&gt; {\n    console.log(data);\n});\n</code></pre>"},{"location":"basics/functions/#higher-order-functions","title":"Higher-Order Functions","text":"<pre><code>function multiplyBy(factor: number): (x: number) =&gt; number {\n    return (x: number) =&gt; x * factor;\n}\n\nconst double = multiplyBy(2);\nconsole.log(double(5)); // 10\n</code></pre>"},{"location":"basics/functions/#async-functions","title":"Async Functions","text":"<pre><code>async function fetchUserData(userId: string): Promise&lt;User&gt; {\n    const response = await fetch(`/api/users/${userId}`);\n    return response.json();\n}\n</code></pre>"},{"location":"basics/functions/#generator-functions","title":"Generator Functions","text":"<pre><code>function* generateSequence(): Generator&lt;number&gt; {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nconst generator = generateSequence();\nconsole.log(generator.next().value); // 1\nconsole.log(generator.next().value); // 2\nconsole.log(generator.next().value); // 3\n</code></pre>"},{"location":"basics/functions/#function-type-aliases","title":"Function Type Aliases","text":"<pre><code>type BinaryOperation = (x: number, y: number) =&gt; number;\n\nconst add: BinaryOperation = (x, y) =&gt; x + y;\nconst subtract: BinaryOperation = (x, y) =&gt; x - y;\n</code></pre>"},{"location":"basics/functions/#best-practices","title":"Best Practices","text":"<ol> <li>Use explicit return types: For complex functions</li> <li>Use arrow functions: For callbacks and methods</li> <li>Use async/await: For asynchronous operations</li> <li>Use function overloads: When a function can be called in multiple ways</li> <li>Use type aliases: For complex function types</li> <li>Use default parameters: Instead of optional parameters when possible</li> <li>Use rest parameters: For functions with variable arguments</li> </ol>"},{"location":"basics/functions/#common-patterns","title":"Common Patterns","text":""},{"location":"basics/functions/#memoization","title":"Memoization","text":"<pre><code>function memoize&lt;T&gt;(fn: (arg: T) =&gt; T): (arg: T) =&gt; T {\n    const cache = new Map&lt;T, T&gt;();\n    return (arg: T): T =&gt; {\n        if (cache.has(arg)) {\n            return cache.get(arg)!;\n        }\n        const result = fn(arg);\n        cache.set(arg, result);\n        return result;\n    };\n}\n</code></pre>"},{"location":"basics/functions/#currying","title":"Currying","text":"<pre><code>function curry&lt;T, U, V&gt;(fn: (x: T, y: U) =&gt; V): (x: T) =&gt; (y: U) =&gt; V {\n    return (x: T) =&gt; (y: U) =&gt; fn(x, y);\n}\n\nconst add = (x: number, y: number) =&gt; x + y;\nconst curriedAdd = curry(add);\nconst addFive = curriedAdd(5);\nconsole.log(addFive(3)); // 8\n</code></pre>"},{"location":"basics/functions/#composition","title":"Composition","text":"<pre><code>function compose&lt;T, U, V&gt;(f: (x: U) =&gt; V, g: (x: T) =&gt; U): (x: T) =&gt; V {\n    return (x: T) =&gt; f(g(x));\n}\n\nconst double = (x: number) =&gt; x * 2;\nconst square = (x: number) =&gt; x * x;\nconst doubleThenSquare = compose(square, double);\nconsole.log(doubleThenSquare(3)); // 36\n</code></pre>"},{"location":"basics/functions/#next-steps","title":"Next Steps","text":"<p>Now that you understand functions, you can learn about: - Classes - Interfaces - Generics </p>"},{"location":"basics/types/","title":"TypeScript Types","text":"<p>TypeScript's type system is one of its most powerful features. It allows you to catch errors during development and provides better tooling support. This guide covers the fundamental types in TypeScript.</p>"},{"location":"basics/types/#basic-types","title":"Basic Types","text":""},{"location":"basics/types/#number","title":"Number","text":"<pre><code>let decimal: number = 6;\nlet hex: number = 0xf00d;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\nlet big: number = 1_000_000;\n</code></pre>"},{"location":"basics/types/#string","title":"String","text":"<pre><code>let color: string = \"blue\";\ncolor = 'red';\nlet fullName: string = `Bob Bobbington`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is ${fullName}. I'll be ${age + 1} years old next month.`;\n</code></pre>"},{"location":"basics/types/#boolean","title":"Boolean","text":"<pre><code>let isDone: boolean = false;\n</code></pre>"},{"location":"basics/types/#array","title":"Array","text":"<pre><code>let list: number[] = [1, 2, 3];\nlet list: Array&lt;number&gt; = [1, 2, 3]; // Generic array type\n</code></pre>"},{"location":"basics/types/#tuple","title":"Tuple","text":"<pre><code>let x: [string, number];\nx = [\"hello\", 10]; // OK\nx = [10, \"hello\"]; // Error\n</code></pre>"},{"location":"basics/types/#enum","title":"Enum","text":"<pre><code>enum Color {\n    Red,\n    Green,\n    Blue\n}\nlet c: Color = Color.Green;\n\n// String enums\nenum Direction {\n    Up = \"UP\",\n    Down = \"DOWN\",\n    Left = \"LEFT\",\n    Right = \"RIGHT\"\n}\n</code></pre>"},{"location":"basics/types/#any","title":"Any","text":"<pre><code>let notSure: any = 4;\nnotSure = \"maybe a string instead\";\nnotSure = false;\n</code></pre>"},{"location":"basics/types/#void","title":"Void","text":"<pre><code>function warnUser(): void {\n    console.log(\"This is a warning message\");\n}\n</code></pre>"},{"location":"basics/types/#null-and-undefined","title":"Null and Undefined","text":"<pre><code>let u: undefined = undefined;\nlet n: null = null;\n</code></pre>"},{"location":"basics/types/#type-assertions","title":"Type Assertions","text":"<p>Type assertions are a way to tell the compiler \"trust me, I know what I'm doing.\"</p> <pre><code>let someValue: any = \"this is a string\";\nlet strLength: number = (someValue as string).length;\n// or\nlet strLength: number = (&lt;string&gt;someValue).length;\n</code></pre>"},{"location":"basics/types/#type-aliases","title":"Type Aliases","text":"<pre><code>type Point = {\n    x: number;\n    y: number;\n};\n\nfunction printCoord(pt: Point) {\n    console.log(\"The coordinate's x value is \" + pt.x);\n    console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n</code></pre>"},{"location":"basics/types/#union-types","title":"Union Types","text":"<pre><code>function printId(id: number | string) {\n    console.log(\"Your ID is: \" + id);\n}\n\nprintId(101); // OK\nprintId(\"202\"); // OK\nprintId({ myID: 22342 }); // Error\n</code></pre>"},{"location":"basics/types/#literal-types","title":"Literal Types","text":"<pre><code>let x: \"hello\" = \"hello\";\n// OK\nx = \"hello\";\n// Error\nx = \"howdy\";\n\n// Combine with unions\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n    // ...\n}\nprintText(\"Hello, world\", \"left\");\nprintText(\"G'day, mate\", \"centre\"); // Error\n</code></pre>"},{"location":"basics/types/#type-guards","title":"Type Guards","text":"<pre><code>function isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n\nfunction isString(x: any): x is string {\n    return typeof x === \"string\";\n}\n\nfunction padLeft(value: string, padding: string | number) {\n    if (isNumber(padding)) {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (isString(padding)) {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n}\n</code></pre>"},{"location":"basics/types/#type-inference","title":"Type Inference","text":"<p>TypeScript can infer types in many cases:</p> <pre><code>let x = 3; // TypeScript infers x is a number\nlet y = [0, 1, null]; // TypeScript infers y is (number | null)[]\n</code></pre>"},{"location":"basics/types/#best-practices","title":"Best Practices","text":"<ol> <li>Avoid using <code>any</code>: Use more specific types whenever possible</li> <li>Use type inference: Let TypeScript infer types when it's obvious</li> <li>Be explicit with complex types: Use type annotations for complex types</li> <li>Use type guards: Implement type guards for type checking</li> <li>Leverage union types: Use union types for variables that can be multiple types</li> </ol>"},{"location":"basics/types/#next-steps","title":"Next Steps","text":"<p>Now that you understand basic types, you can learn about: - Variables - Functions - Advanced Types </p>"},{"location":"basics/variables/","title":"Variables in TypeScript","text":"<p>Variables are fundamental building blocks in TypeScript. This guide covers how to declare and use variables with TypeScript's type system.</p>"},{"location":"basics/variables/#variable-declarations","title":"Variable Declarations","text":"<p>TypeScript supports three ways to declare variables:</p>"},{"location":"basics/variables/#var","title":"<code>var</code>","text":"<pre><code>var x = 10;\n</code></pre> <ul> <li>Function-scoped</li> <li>Hoisted</li> <li>Can be redeclared</li> <li>Avoid using in modern TypeScript</li> </ul>"},{"location":"basics/variables/#let","title":"<code>let</code>","text":"<pre><code>let x = 10;\n</code></pre> <ul> <li>Block-scoped</li> <li>Not hoisted</li> <li>Cannot be redeclared in the same scope</li> <li>Preferred for variables that change</li> </ul>"},{"location":"basics/variables/#const","title":"<code>const</code>","text":"<pre><code>const x = 10;\n</code></pre> <ul> <li>Block-scoped</li> <li>Not hoisted</li> <li>Cannot be reassigned</li> <li>Must be initialized</li> <li>Preferred for values that don't change</li> </ul>"},{"location":"basics/variables/#type-annotations","title":"Type Annotations","text":"<p>You can explicitly specify types for variables:</p> <pre><code>let name: string = \"John\";\nlet age: number = 30;\nlet isActive: boolean = true;\n</code></pre>"},{"location":"basics/variables/#type-inference","title":"Type Inference","text":"<p>TypeScript can infer types from initial values:</p> <pre><code>let name = \"John\"; // TypeScript infers string\nlet age = 30;      // TypeScript infers number\nlet isActive = true; // TypeScript infers boolean\n</code></pre>"},{"location":"basics/variables/#variable-scope","title":"Variable Scope","text":""},{"location":"basics/variables/#global-scope","title":"Global Scope","text":"<pre><code>var globalVar = \"I'm global\";\nlet globalLet = \"I'm also global\";\nconst globalConst = \"I'm global too\";\n</code></pre>"},{"location":"basics/variables/#function-scope","title":"Function Scope","text":"<pre><code>function example() {\n    var functionVar = \"I'm function scoped\";\n    let functionLet = \"I'm block scoped\";\n    const functionConst = \"I'm block scoped\";\n}\n</code></pre>"},{"location":"basics/variables/#block-scope","title":"Block Scope","text":"<pre><code>if (true) {\n    var blockVar = \"I'm still accessible outside\";\n    let blockLet = \"I'm only accessible here\";\n    const blockConst = \"I'm only accessible here\";\n}\nconsole.log(blockVar); // Works\nconsole.log(blockLet); // Error\nconsole.log(blockConst); // Error\n</code></pre>"},{"location":"basics/variables/#variable-hoisting","title":"Variable Hoisting","text":""},{"location":"basics/variables/#var-hoisting","title":"<code>var</code> Hoisting","text":"<pre><code>console.log(x); // undefined\nvar x = 5;\nconsole.log(x); // 5\n</code></pre>"},{"location":"basics/variables/#let-and-const-hoisting","title":"<code>let</code> and <code>const</code> Hoisting","text":"<pre><code>console.log(x); // ReferenceError\nlet x = 5;\n</code></pre>"},{"location":"basics/variables/#destructuring","title":"Destructuring","text":""},{"location":"basics/variables/#array-destructuring","title":"Array Destructuring","text":"<pre><code>let [first, second] = [1, 2];\nconsole.log(first); // 1\nconsole.log(second); // 2\n\n// With type annotations\nlet [a, b]: [number, number] = [1, 2];\n</code></pre>"},{"location":"basics/variables/#object-destructuring","title":"Object Destructuring","text":"<pre><code>let { name, age } = { name: \"John\", age: 30 };\nconsole.log(name); // John\nconsole.log(age); // 30\n\n// With type annotations\nlet { name, age }: { name: string; age: number } = { name: \"John\", age: 30 };\n</code></pre>"},{"location":"basics/variables/#default-values","title":"Default Values","text":"<pre><code>function greet(name: string = \"Guest\") {\n    console.log(`Hello, ${name}!`);\n}\n\ngreet(); // Hello, Guest!\ngreet(\"John\"); // Hello, John!\n</code></pre>"},{"location":"basics/variables/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>const</code> by default: Only use <code>let</code> when you need to reassign</li> <li>Avoid <code>var</code>: Use <code>let</code> or <code>const</code> instead</li> <li>Be explicit with types: When type inference isn't clear</li> <li>Use meaningful names: Make variable names descriptive</li> <li>Initialize variables: Always initialize variables when declaring them</li> <li>Use destructuring: For cleaner code when working with objects and arrays</li> </ol>"},{"location":"basics/variables/#common-patterns","title":"Common Patterns","text":""},{"location":"basics/variables/#swapping-variables","title":"Swapping Variables","text":"<pre><code>let a = 1;\nlet b = 2;\n[a, b] = [b, a];\nconsole.log(a); // 2\nconsole.log(b); // 1\n</code></pre>"},{"location":"basics/variables/#rest-parameters","title":"Rest Parameters","text":"<pre><code>function sum(...numbers: number[]): number {\n    return numbers.reduce((a, b) =&gt; a + b, 0);\n}\nconsole.log(sum(1, 2, 3)); // 6\n</code></pre>"},{"location":"basics/variables/#spread-operator","title":"Spread Operator","text":"<pre><code>let arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"basics/variables/#next-steps","title":"Next Steps","text":"<p>Now that you understand variables, you can learn about: - Functions - Types - Advanced Types </p>"},{"location":"best-practices/code-organization/","title":"TypeScript Code Organization Best Practices","text":""},{"location":"best-practices/code-organization/#1-project-structure","title":"1. Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/     # Reusable UI components\n\u251c\u2500\u2500 features/       # Feature-specific modules\n\u251c\u2500\u2500 services/       # API and external services\n\u251c\u2500\u2500 utils/          # Utility functions\n\u251c\u2500\u2500 types/          # Type definitions\n\u251c\u2500\u2500 constants/      # Constants and enums\n\u251c\u2500\u2500 hooks/          # Custom React hooks\n\u251c\u2500\u2500 styles/         # Global styles and themes\n\u2514\u2500\u2500 index.ts        # Main entry point\n</code></pre>"},{"location":"best-practices/code-organization/#2-file-naming-conventions","title":"2. File Naming Conventions","text":"<pre><code>// Good\nUserProfile.tsx\nuser-profile.tsx\nuserProfile.tsx\n\n// Bad\nuserprofile.tsx\nuser_profile.tsx\n</code></pre>"},{"location":"best-practices/code-organization/#3-module-organization","title":"3. Module Organization","text":"<pre><code>// Good - Single responsibility\n// user.service.ts\nexport class UserService {\n  async getUser(id: string): Promise&lt;User&gt; {\n    // ...\n  }\n\n  async updateUser(user: User): Promise&lt;void&gt; {\n    // ...\n  }\n}\n\n// Bad - Multiple responsibilities\n// user.ts\nexport class User {\n  // User model\n}\n\nexport class UserService {\n  // User service\n}\n\nexport class UserValidator {\n  // User validation\n}\n</code></pre>"},{"location":"best-practices/code-organization/#4-barrel-files","title":"4. Barrel Files","text":"<pre><code>// Good - index.ts in a directory\nexport * from './user.service';\nexport * from './user.model';\nexport * from './user.validator';\n\n// Usage\nimport { UserService, User, UserValidator } from './user';\n</code></pre>"},{"location":"best-practices/code-organization/#5-dependency-management","title":"5. Dependency Management","text":"<pre><code>// Good - Dependency injection\ninterface UserRepository {\n  getUser(id: string): Promise&lt;User&gt;;\n  saveUser(user: User): Promise&lt;void&gt;;\n}\n\nclass UserService {\n  constructor(private repository: UserRepository) {}\n\n  async getUser(id: string): Promise&lt;User&gt; {\n    return this.repository.getUser(id);\n  }\n}\n\n// Bad - Direct dependency\nclass UserService {\n  async getUser(id: string): Promise&lt;User&gt; {\n    return Database.getUser(id); // Direct dependency\n  }\n}\n</code></pre>"},{"location":"best-practices/code-organization/#6-type-organization","title":"6. Type Organization","text":"<pre><code>// Good - Separate type file\n// types/user.ts\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport type UserRole = 'admin' | 'user' | 'guest';\n\n// Good - Group related types\n// types/api.ts\nexport interface ApiResponse&lt;T&gt; {\n  data: T;\n  status: number;\n}\n\nexport interface ApiError {\n  code: string;\n  message: string;\n}\n</code></pre>"},{"location":"best-practices/code-organization/#7-constants-organization","title":"7. Constants Organization","text":"<pre><code>// Good - Group related constants\n// constants/api.ts\nexport const API_ENDPOINTS = {\n  USERS: '/api/users',\n  POSTS: '/api/posts',\n} as const;\n\n// constants/validation.ts\nexport const VALIDATION_RULES = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_USERNAME_LENGTH: 20,\n} as const;\n</code></pre>"},{"location":"best-practices/code-organization/#8-utility-functions-organization","title":"8. Utility Functions Organization","text":"<pre><code>// Good - Group by purpose\n// utils/string.ts\nexport function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// utils/date.ts\nexport function formatDate(date: Date): string {\n  return date.toISOString();\n}\n</code></pre>"},{"location":"best-practices/code-organization/#9-component-organization","title":"9. Component Organization","text":"<pre><code>// Good - Feature-based organization\n// features/user/components/UserProfile.tsx\nexport function UserProfile({ user }: { user: User }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{user.name}&lt;/h1&gt;\n      &lt;p&gt;{user.email}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// features/user/hooks/useUser.ts\nexport function useUser(userId: string) {\n  // User-related hooks\n}\n</code></pre>"},{"location":"best-practices/code-organization/#10-service-layer-organization","title":"10. Service Layer Organization","text":"<pre><code>// Good - Service interfaces\n// services/types.ts\nexport interface IUserService {\n  getUser(id: string): Promise&lt;User&gt;;\n  updateUser(user: User): Promise&lt;void&gt;;\n}\n\n// services/implementations/user.service.ts\nexport class UserService implements IUserService {\n  // Implementation\n}\n</code></pre>"},{"location":"best-practices/code-organization/#11-configuration-organization","title":"11. Configuration Organization","text":"<pre><code>// Good - Environment-based config\n// config/index.ts\nexport const config = {\n  api: {\n    baseUrl: process.env.API_BASE_URL,\n    timeout: 5000,\n  },\n  auth: {\n    tokenKey: 'auth_token',\n  },\n} as const;\n</code></pre>"},{"location":"best-practices/code-organization/#12-test-organization","title":"12. Test Organization","text":"<pre><code>// Good - Mirror source structure\nsrc/\n\u251c\u2500\u2500 components/\n\u2502   \u2514\u2500\u2500 Button.tsx\n\u2514\u2500\u2500 __tests__/\n    \u2514\u2500\u2500 components/\n        \u2514\u2500\u2500 Button.test.tsx\n\n// Good - Test file naming\nButton.test.tsx\nButton.spec.tsx\nButton.e2e.ts\n</code></pre>"},{"location":"best-practices/code-organization/#13-documentation-organization","title":"13. Documentation Organization","text":"<pre><code>// Good - JSDoc comments\n/**\n * Represents a user in the system\n * @interface User\n * @property {string} id - Unique identifier\n * @property {string} name - User's full name\n */\ninterface User {\n  id: string;\n  name: string;\n}\n\n// Good - README organization\nREADME.md\n\u251c\u2500\u2500 Installation\n\u251c\u2500\u2500 Usage\n\u251c\u2500\u2500 API Reference\n\u251c\u2500\u2500 Contributing\n\u2514\u2500\u2500 License\n</code></pre>"},{"location":"best-practices/code-organization/#14-import-organization","title":"14. Import Organization","text":"<pre><code>// Good - Grouped imports\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport { UserService } from '@/services';\nimport { User } from '@/types';\n\nimport { Button } from '@/components';\nimport { useUser } from '@/hooks';\n\nimport { API_ENDPOINTS } from '@/constants';\nimport { formatDate } from '@/utils';\n</code></pre>"},{"location":"best-practices/error-handling/","title":"TypeScript Error Handling Best Practices","text":""},{"location":"best-practices/error-handling/#1-use-custom-error-classes","title":"1. Use Custom Error Classes","text":"<pre><code>// Good\nclass ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nclass NetworkError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#2-use-type-guards-for-error-handling","title":"2. Use Type Guards for Error Handling","text":"<pre><code>// Good\nfunction isValidationError(error: unknown): error is ValidationError {\n  return error instanceof ValidationError;\n}\n\ntry {\n  // Some operation that might throw\n} catch (error) {\n  if (isValidationError(error)) {\n    // Handle validation error\n  } else if (error instanceof NetworkError) {\n    // Handle network error\n  } else {\n    // Handle unexpected error\n    console.error('Unexpected error:', error);\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#3-use-result-type-pattern","title":"3. Use Result Type Pattern","text":"<pre><code>// Good\ntype Result&lt;T, E = Error&gt; = \n  | { success: true; value: T }\n  | { success: false; error: E };\n\nfunction divide(a: number, b: number): Result&lt;number, string&gt; {\n  if (b === 0) {\n    return { success: false, error: 'Division by zero' };\n  }\n  return { success: true, value: a / b };\n}\n\nconst result = divide(10, 2);\nif (result.success) {\n  console.log(result.value);\n} else {\n  console.error(result.error);\n}\n</code></pre>"},{"location":"best-practices/error-handling/#4-use-async-error-handling","title":"4. Use Async Error Handling","text":"<pre><code>// Good\nasync function fetchData(): Promise&lt;Result&lt;Data&gt;&gt; {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      return { success: false, error: new NetworkError('Failed to fetch data') };\n    }\n    const data = await response.json();\n    return { success: true, value: data };\n  } catch (error) {\n    return { success: false, error: new NetworkError('Network request failed') };\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#5-use-error-boundaries","title":"5. Use Error Boundaries","text":"<pre><code>// Good\nclass ErrorBoundary extends React.Component&lt;\n  { children: React.ReactNode },\n  { hasError: boolean; error: Error | null }\n&gt; {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;ErrorFallback error={this.state.error} /&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#6-use-proper-error-logging","title":"6. Use Proper Error Logging","text":"<pre><code>// Good\nfunction logError(error: unknown, context: Record&lt;string, unknown&gt; = {}) {\n  const errorInfo = {\n    timestamp: new Date().toISOString(),\n    error: error instanceof Error ? {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    } : error,\n    context\n  };\n\n  // Log to appropriate service\n  console.error('Error occurred:', errorInfo);\n}\n</code></pre>"},{"location":"best-practices/error-handling/#7-use-error-recovery-strategies","title":"7. Use Error Recovery Strategies","text":"<pre><code>// Good\nasync function withRetry&lt;T&gt;(\n  operation: () =&gt; Promise&lt;T&gt;,\n  maxRetries: number = 3\n): Promise&lt;T&gt; {\n  let lastError: Error | null = null;\n\n  for (let i = 0; i &lt; maxRetries; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      if (i &lt; maxRetries - 1) {\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000 * Math.pow(2, i)));\n      }\n    }\n  }\n\n  throw lastError;\n}\n</code></pre>"},{"location":"best-practices/error-handling/#8-use-error-aggregation","title":"8. Use Error Aggregation","text":"<pre><code>// Good\nclass AggregateError extends Error {\n  constructor(\n    public errors: Error[],\n    message: string = 'Multiple errors occurred'\n  ) {\n    super(message);\n    this.name = 'AggregateError';\n  }\n}\n\nasync function validateAll(inputs: string[]): Promise&lt;void&gt; {\n  const errors: Error[] = [];\n\n  for (const input of inputs) {\n    try {\n      await validateInput(input);\n    } catch (error) {\n      errors.push(error as Error);\n    }\n  }\n\n  if (errors.length &gt; 0) {\n    throw new AggregateError(errors);\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#9-use-error-codes","title":"9. Use Error Codes","text":"<pre><code>// Good\nenum ErrorCode {\n  INVALID_INPUT = 'INVALID_INPUT',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  DATABASE_ERROR = 'DATABASE_ERROR',\n}\n\nclass CodedError extends Error {\n  constructor(\n    public code: ErrorCode,\n    message: string\n  ) {\n    super(message);\n    this.name = 'CodedError';\n  }\n}\n\nfunction handleError(error: unknown) {\n  if (error instanceof CodedError) {\n    switch (error.code) {\n      case ErrorCode.INVALID_INPUT:\n        // Handle invalid input\n        break;\n      case ErrorCode.NETWORK_ERROR:\n        // Handle network error\n        break;\n      case ErrorCode.DATABASE_ERROR:\n        // Handle database error\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"best-practices/error-handling/#10-use-error-context","title":"10. Use Error Context","text":"<pre><code>// Good\nclass ContextualError extends Error {\n  constructor(\n    message: string,\n    public context: Record&lt;string, unknown&gt;\n  ) {\n    super(message);\n    this.name = 'ContextualError';\n  }\n}\n\nfunction processUserData(userId: string, data: unknown) {\n  try {\n    // Process data\n  } catch (error) {\n    throw new ContextualError('Failed to process user data', {\n      userId,\n      data,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n</code></pre>"},{"location":"best-practices/performance/","title":"TypeScript Performance Optimization Best Practices","text":""},{"location":"best-practices/performance/#1-use-proper-type-definitions","title":"1. Use Proper Type Definitions","text":"<pre><code>// Good - Specific types\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\n// Bad - Using any\nfunction processUser(user: any) {\n  // ...\n}\n</code></pre>"},{"location":"best-practices/performance/#2-avoid-type-assertions","title":"2. Avoid Type Assertions","text":"<pre><code>// Bad\nconst value = someValue as string;\n\n// Good\nif (typeof someValue === 'string') {\n  const value = someValue;\n}\n</code></pre>"},{"location":"best-practices/performance/#3-use-const-assertions","title":"3. Use Const Assertions","text":"<pre><code>// Good\nconst COLORS = ['red', 'green', 'blue'] as const;\ntype Color = typeof COLORS[number];\n\n// Bad\nconst COLORS = ['red', 'green', 'blue'];\n</code></pre>"},{"location":"best-practices/performance/#4-optimize-type-checking","title":"4. Optimize Type Checking","text":"<pre><code>// Good - Use type guards\nfunction isUser(value: unknown): value is User {\n  return (\n    typeof value === 'object' &amp;&amp;\n    value !== null &amp;&amp;\n    'id' in value &amp;&amp;\n    'name' in value\n  );\n}\n\n// Bad - Complex type checking\nfunction validateUser(user: unknown) {\n  if (typeof user === 'object' &amp;&amp; user !== null) {\n    // Complex checks\n  }\n}\n</code></pre>"},{"location":"best-practices/performance/#5-use-proper-generics","title":"5. Use Proper Generics","text":"<pre><code>// Good - Constrained generics\nfunction processArray&lt;T extends { id: string }&gt;(items: T[]): T[] {\n  return items.filter(item =&gt; item.id !== '');\n}\n\n// Bad - Unconstrained generics\nfunction processArray&lt;T&gt;(items: T[]): T[] {\n  return items;\n}\n</code></pre>"},{"location":"best-practices/performance/#6-optimize-interface-usage","title":"6. Optimize Interface Usage","text":"<pre><code>// Good - Use type aliases for simple types\ntype UserId = string;\ntype UserName = string;\n\n// Good - Use interfaces for object shapes\ninterface User {\n  id: UserId;\n  name: UserName;\n}\n</code></pre>"},{"location":"best-practices/performance/#7-use-proper-module-imports","title":"7. Use Proper Module Imports","text":"<pre><code>// Good - Import only what you need\nimport { useState } from 'react';\n\n// Bad - Import everything\nimport * as React from 'react';\n</code></pre>"},{"location":"best-practices/performance/#8-optimize-bundle-size","title":"8. Optimize Bundle Size","text":"<pre><code>// Good - Use dynamic imports\nconst HeavyComponent = React.lazy(() =&gt; import('./HeavyComponent'));\n\n// Good - Use tree-shakeable exports\nexport const add = (a: number, b: number) =&gt; a + b;\nexport const subtract = (a: number, b: number) =&gt; a - b;\n</code></pre>"},{"location":"best-practices/performance/#9-use-proper-memory-management","title":"9. Use Proper Memory Management","text":"<pre><code>// Good - Clear references\nclass DataProcessor {\n  private cache: Map&lt;string, any&gt; = new Map();\n\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Good - Use WeakMap for garbage collection\nconst weakMap = new WeakMap&lt;object, any&gt;();\n</code></pre>"},{"location":"best-practices/performance/#10-optimize-event-handlers","title":"10. Optimize Event Handlers","text":"<pre><code>// Good - Use useCallback\nconst handleClick = React.useCallback(() =&gt; {\n  // Handle click\n}, []);\n\n// Good - Use debounce\nconst debouncedSearch = debounce((query: string) =&gt; {\n  // Search logic\n}, 300);\n</code></pre>"},{"location":"best-practices/performance/#11-use-proper-state-management","title":"11. Use Proper State Management","text":"<pre><code>// Good - Use local state when possible\nconst [count, setCount] = useState(0);\n\n// Good - Use context for global state\nconst UserContext = React.createContext&lt;User | null&gt;(null);\n</code></pre>"},{"location":"best-practices/performance/#12-optimize-render-performance","title":"12. Optimize Render Performance","text":"<pre><code>// Good - Use React.memo\nconst MemoizedComponent = React.memo(function Component({ data }: Props) {\n  return &lt;div&gt;{data}&lt;/div&gt;;\n});\n\n// Good - Use useMemo\nconst memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\n</code></pre>"},{"location":"best-practices/performance/#13-use-proper-data-structures","title":"13. Use Proper Data Structures","text":"<pre><code>// Good - Use Set for unique values\nconst uniqueValues = new Set&lt;string&gt;();\n\n// Good - Use Map for key-value pairs\nconst userMap = new Map&lt;string, User&gt;();\n</code></pre>"},{"location":"best-practices/performance/#14-optimize-async-operations","title":"14. Optimize Async Operations","text":"<pre><code>// Good - Use Promise.all for parallel operations\nconst [user, posts] = await Promise.all([\n  fetchUser(userId),\n  fetchPosts(userId)\n]);\n\n// Good - Use proper error handling\nasync function fetchData() {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Network error');\n    return await response.json();\n  } catch (error) {\n    // Handle error\n  }\n}\n</code></pre>"},{"location":"best-practices/performance/#15-use-proper-caching-strategies","title":"15. Use Proper Caching Strategies","text":"<pre><code>// Good - Implement caching\nclass Cache&lt;T&gt; {\n  private cache: Map&lt;string, { data: T; timestamp: number }&gt; = new Map();\n  private readonly ttl: number;\n\n  constructor(ttl: number) {\n    this.ttl = ttl;\n  }\n\n  get(key: string): T | null {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    if (Date.now() - item.timestamp &gt; this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return item.data;\n  }\n\n  set(key: string, data: T): void {\n    this.cache.set(key, { data, timestamp: Date.now() });\n  }\n}\n</code></pre>"},{"location":"best-practices/performance/#16-optimize-loops-and-iterations","title":"16. Optimize Loops and Iterations","text":"<pre><code>// Good - Use for...of for arrays\nfor (const item of items) {\n  // Process item\n}\n\n// Good - Use Map/Reduce for transformations\nconst sum = items.reduce((acc, item) =&gt; acc + item, 0);\n</code></pre>"},{"location":"best-practices/performance/#17-use-proper-error-boundaries","title":"17. Use Proper Error Boundaries","text":"<pre><code>// Good - Implement error boundaries\nclass ErrorBoundary extends React.Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log error\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;FallbackComponent /&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"best-practices/security/","title":"TypeScript Security Best Practices","text":""},{"location":"best-practices/security/#1-input-validation","title":"1. Input Validation","text":"<pre><code>// Good - Input validation\nfunction validateUserInput(input: unknown): UserInput {\n  if (typeof input !== 'object' || input === null) {\n    throw new ValidationError('Invalid input format');\n  }\n\n  const { name, email } = input as Record&lt;string, unknown&gt;;\n\n  if (typeof name !== 'string' || name.length &lt; 2) {\n    throw new ValidationError('Invalid name');\n  }\n\n  if (typeof email !== 'string' || !email.includes('@')) {\n    throw new ValidationError('Invalid email');\n  }\n\n  return { name, email };\n}\n</code></pre>"},{"location":"best-practices/security/#2-sanitize-user-input","title":"2. Sanitize User Input","text":"<pre><code>// Good - Input sanitization\nfunction sanitizeHtml(input: string): string {\n  return input\n    .replace(/&amp;/g, '&amp;amp;')\n    .replace(/&lt;/g, '&amp;lt;')\n    .replace(/&gt;/g, '&amp;gt;')\n    .replace(/\"/g, '&amp;quot;')\n    .replace(/'/g, '&amp;#039;');\n}\n\n// Good - Use template literals safely\nconst safeHtml = `&lt;div&gt;${sanitizeHtml(userInput)}&lt;/div&gt;`;\n</code></pre>"},{"location":"best-practices/security/#3-secure-password-handling","title":"3. Secure Password Handling","text":"<pre><code>// Good - Password hashing\nimport * as bcrypt from 'bcrypt';\n\nasync function hashPassword(password: string): Promise&lt;string&gt; {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n\nasync function verifyPassword(password: string, hash: string): Promise&lt;boolean&gt; {\n  return bcrypt.compare(password, hash);\n}\n</code></pre>"},{"location":"best-practices/security/#4-secure-api-authentication","title":"4. Secure API Authentication","text":"<pre><code>// Good - JWT handling\nimport * as jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nfunction generateToken(user: User): string {\n  return jwt.sign(\n    { userId: user.id, role: user.role },\n    JWT_SECRET,\n    { expiresIn: '1h' }\n  );\n}\n\nfunction verifyToken(token: string): UserPayload {\n  return jwt.verify(token, JWT_SECRET) as UserPayload;\n}\n</code></pre>"},{"location":"best-practices/security/#5-secure-file-uploads","title":"5. Secure File Uploads","text":"<pre><code>// Good - File upload validation\nfunction validateFileUpload(file: File): void {\n  const MAX_SIZE = 5 * 1024 * 1024; // 5MB\n  const ALLOWED_TYPES = ['image/jpeg', 'image/png'];\n\n  if (file.size &gt; MAX_SIZE) {\n    throw new Error('File too large');\n  }\n\n  if (!ALLOWED_TYPES.includes(file.type)) {\n    throw new Error('Invalid file type');\n  }\n}\n</code></pre>"},{"location":"best-practices/security/#6-secure-database-operations","title":"6. Secure Database Operations","text":"<pre><code>// Good - Parameterized queries\nasync function getUserById(id: string): Promise&lt;User&gt; {\n  const query = 'SELECT * FROM users WHERE id = $1';\n  const result = await db.query(query, [id]);\n  return result.rows[0];\n}\n\n// Bad - String concatenation\nasync function getUserById(id: string): Promise&lt;User&gt; {\n  const query = `SELECT * FROM users WHERE id = ${id}`; // SQL injection risk\n  return db.query(query);\n}\n</code></pre>"},{"location":"best-practices/security/#7-secure-environment-variables","title":"7. Secure Environment Variables","text":"<pre><code>// Good - Environment validation\nfunction validateEnv(): void {\n  const required = ['DB_URL', 'JWT_SECRET', 'API_KEY'];\n\n  for (const key of required) {\n    if (!process.env[key]) {\n      throw new Error(`Missing required environment variable: ${key}`);\n    }\n  }\n}\n\n// Good - Type-safe environment\ninterface Env {\n  DB_URL: string;\n  JWT_SECRET: string;\n  API_KEY: string;\n}\n\nconst env: Env = {\n  DB_URL: process.env.DB_URL!,\n  JWT_SECRET: process.env.JWT_SECRET!,\n  API_KEY: process.env.API_KEY!\n};\n</code></pre>"},{"location":"best-practices/security/#8-secure-cors-configuration","title":"8. Secure CORS Configuration","text":"<pre><code>// Good - CORS configuration\nconst corsOptions = {\n  origin: (origin: string | undefined, callback: (err: Error | null, allow?: boolean) =&gt; void) =&gt; {\n    const allowedOrigins = ['https://example.com', 'https://api.example.com'];\n    if (!origin || allowedOrigins.includes(origin)) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n};\n</code></pre>"},{"location":"best-practices/security/#9-secure-rate-limiting","title":"9. Secure Rate Limiting","text":"<pre><code>// Good - Rate limiting\nimport rateLimit from 'express-rate-limit';\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later'\n});\n\napp.use('/api/', limiter);\n</code></pre>"},{"location":"best-practices/security/#10-secure-headers","title":"10. Secure Headers","text":"<pre><code>// Good - Security headers\nimport helmet from 'helmet';\n\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", 'data:', 'https:'],\n      connectSrc: [\"'self'\", 'https://api.example.com']\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n</code></pre>"},{"location":"best-practices/security/#11-secure-session-management","title":"11. Secure Session Management","text":"<pre><code>// Good - Session configuration\nimport session from 'express-session';\n\napp.use(session({\n  secret: process.env.SESSION_SECRET!,\n  name: 'sessionId',\n  cookie: {\n    secure: true,\n    httpOnly: true,\n    sameSite: 'strict',\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  },\n  resave: false,\n  saveUninitialized: false\n}));\n</code></pre>"},{"location":"best-practices/security/#12-secure-error-handling","title":"12. Secure Error Handling","text":"<pre><code>// Good - Secure error handling\napp.use((err: Error, req: Request, res: Response, next: NextFunction) =&gt; {\n  console.error(err.stack);\n\n  // Don't expose internal errors\n  const errorResponse = {\n    message: 'An error occurred',\n    ...(process.env.NODE_ENV === 'development' &amp;&amp; { stack: err.stack })\n  };\n\n  res.status(500).json(errorResponse);\n});\n</code></pre>"},{"location":"best-practices/security/#13-secure-logging","title":"13. Secure Logging","text":"<pre><code>// Good - Secure logging\nfunction secureLog(data: unknown): void {\n  const sanitizedData = {\n    ...data,\n    password: '[REDACTED]',\n    token: '[REDACTED]',\n    creditCard: '[REDACTED]'\n  };\n\n  console.log(JSON.stringify(sanitizedData));\n}\n</code></pre>"},{"location":"best-practices/security/#14-secure-file-system-operations","title":"14. Secure File System Operations","text":"<pre><code>// Good - Secure file operations\nimport * as path from 'path';\n\nfunction getSafePath(userInput: string): string {\n  const basePath = '/uploads';\n  const safePath = path.normalize(userInput).replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  return path.join(basePath, safePath);\n}\n</code></pre>"},{"location":"best-practices/security/#15-secure-api-keys","title":"15. Secure API Keys","text":"<pre><code>// Good - API key management\nclass ApiKeyManager {\n  private static instance: ApiKeyManager;\n  private keys: Map&lt;string, string&gt; = new Map();\n\n  private constructor() {}\n\n  static getInstance(): ApiKeyManager {\n    if (!ApiKeyManager.instance) {\n      ApiKeyManager.instance = new ApiKeyManager();\n    }\n    return ApiKeyManager.instance;\n  }\n\n  validateKey(key: string): boolean {\n    return this.keys.has(key);\n  }\n}\n</code></pre>"},{"location":"best-practices/security/#16-secure-websocket-connections","title":"16. Secure WebSocket Connections","text":"<pre><code>// Good - WebSocket security\nimport * as WebSocket from 'ws';\n\nconst wss = new WebSocket.Server({\n  verifyClient: (info, callback) =&gt; {\n    const token = info.req.headers['sec-websocket-protocol'];\n    try {\n      verifyToken(token as string);\n      callback(true);\n    } catch (error) {\n      callback(false, 401, 'Unauthorized');\n    }\n  }\n});\n</code></pre>"},{"location":"best-practices/security/#17-secure-dependency-management","title":"17. Secure Dependency Management","text":"<pre><code>// Good - Dependency security\n{\n  \"scripts\": {\n    \"preinstall\": \"npx npm-audit\",\n    \"postinstall\": \"npx snyk test\"\n  },\n  \"devDependencies\": {\n    \"npm-audit\": \"^1.0.0\",\n    \"snyk\": \"^1.0.0\"\n  }\n}\n</code></pre>"},{"location":"best-practices/testing/","title":"TypeScript Testing Best Practices","text":""},{"location":"best-practices/testing/#1-test-organization","title":"1. Test Organization","text":"<pre><code>// Good - Test file structure\ndescribe('UserService', () =&gt; {\n  describe('getUser', () =&gt; {\n    it('should return user when found', async () =&gt; {\n      // Test implementation\n    });\n\n    it('should throw error when user not found', async () =&gt; {\n      // Test implementation\n    });\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#2-use-proper-test-naming","title":"2. Use Proper Test Naming","text":"<pre><code>// Good - Descriptive test names\nit('should return 404 when resource is not found', () =&gt; {\n  // Test implementation\n});\n\n// Bad - Vague test names\nit('should work', () =&gt; {\n  // Test implementation\n});\n</code></pre>"},{"location":"best-practices/testing/#3-use-test-fixtures","title":"3. Use Test Fixtures","text":"<pre><code>// Good - Test fixtures\nconst mockUser: User = {\n  id: '1',\n  name: 'John Doe',\n  email: 'john@example.com'\n};\n\ndescribe('UserService', () =&gt; {\n  it('should process user data correctly', () =&gt; {\n    const result = processUser(mockUser);\n    expect(result).toBeDefined();\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#4-use-proper-mocks","title":"4. Use Proper Mocks","text":"<pre><code>// Good - Mock implementation\njest.mock('./userService', () =&gt; ({\n  UserService: jest.fn().mockImplementation(() =&gt; ({\n    getUser: jest.fn().mockResolvedValue(mockUser)\n  }))\n}));\n\n// Good - Mock functions\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n</code></pre>"},{"location":"best-practices/testing/#5-use-test-utilities","title":"5. Use Test Utilities","text":"<pre><code>// Good - Test utilities\nfunction createTestUser(overrides: Partial&lt;User&gt; = {}): User {\n  return {\n    id: '1',\n    name: 'Test User',\n    email: 'test@example.com',\n    ...overrides\n  };\n}\n\n// Usage\nconst user = createTestUser({ name: 'Custom Name' });\n</code></pre>"},{"location":"best-practices/testing/#6-use-proper-assertions","title":"6. Use Proper Assertions","text":"<pre><code>// Good - Specific assertions\nexpect(result).toBeDefined();\nexpect(result).toHaveProperty('id');\nexpect(result.id).toBe('1');\n\n// Bad - Generic assertions\nexpect(result).toBeTruthy();\n</code></pre>"},{"location":"best-practices/testing/#7-test-error-cases","title":"7. Test Error Cases","text":"<pre><code>// Good - Error testing\nit('should throw error when input is invalid', () =&gt; {\n  expect(() =&gt; processUser(null)).toThrow(ValidationError);\n  expect(() =&gt; processUser({})).toThrow('Invalid user data');\n});\n</code></pre>"},{"location":"best-practices/testing/#8-use-async-testing","title":"8. Use Async Testing","text":"<pre><code>// Good - Async testing\nit('should fetch user data', async () =&gt; {\n  const user = await userService.getUser('1');\n  expect(user).toEqual(mockUser);\n});\n\n// Good - Promise rejection testing\nit('should reject when API fails', async () =&gt; {\n  await expect(userService.getUser('1')).rejects.toThrow(NetworkError);\n});\n</code></pre>"},{"location":"best-practices/testing/#9-use-test-coverage","title":"9. Use Test Coverage","text":"<pre><code>// Good - Test coverage comments\n/* istanbul ignore next */\nfunction helperFunction() {\n  // Implementation\n}\n\n// Good - Coverage thresholds in jest.config.js\nmodule.exports = {\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n</code></pre>"},{"location":"best-practices/testing/#10-use-test-hooks","title":"10. Use Test Hooks","text":"<pre><code>// Good - Test hooks\ndescribe('UserService', () =&gt; {\n  let userService: UserService;\n  let mockRepository: jest.Mocked&lt;UserRepository&gt;;\n\n  beforeEach(() =&gt; {\n    mockRepository = {\n      getUser: jest.fn(),\n      saveUser: jest.fn()\n    };\n    userService = new UserService(mockRepository);\n  });\n\n  afterEach(() =&gt; {\n    jest.clearAllMocks();\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#11-use-integration-tests","title":"11. Use Integration Tests","text":"<pre><code>// Good - Integration test\ndescribe('User API Integration', () =&gt; {\n  let server: Server;\n\n  beforeAll(async () =&gt; {\n    server = await startTestServer();\n  });\n\n  afterAll(async () =&gt; {\n    await server.close();\n  });\n\n  it('should create and retrieve user', async () =&gt; {\n    const user = await createUser(testUser);\n    const retrieved = await getUser(user.id);\n    expect(retrieved).toEqual(user);\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#12-use-e2e-tests","title":"12. Use E2E Tests","text":"<pre><code>// Good - E2E test\ndescribe('User Flow', () =&gt; {\n  it('should complete user registration', async () =&gt; {\n    await page.goto('/register');\n    await page.fill('#email', 'test@example.com');\n    await page.fill('#password', 'password123');\n    await page.click('#submit');\n    await expect(page).toHaveURL('/dashboard');\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#13-use-test-data-factories","title":"13. Use Test Data Factories","text":"<pre><code>// Good - Test data factory\nclass TestDataFactory {\n  static createUser(overrides: Partial&lt;User&gt; = {}): User {\n    return {\n      id: faker.datatype.uuid(),\n      name: faker.name.fullName(),\n      email: faker.internet.email(),\n      ...overrides\n    };\n  }\n}\n\n// Usage\nconst user = TestDataFactory.createUser({ role: 'admin' });\n</code></pre>"},{"location":"best-practices/testing/#14-use-snapshot-testing","title":"14. Use Snapshot Testing","text":"<pre><code>// Good - Snapshot testing\nit('should render user profile correctly', () =&gt; {\n  const { container } = render(&lt;UserProfile user={mockUser} /&gt;);\n  expect(container).toMatchSnapshot();\n});\n\n// Good - Inline snapshot\nit('should format user data correctly', () =&gt; {\n  const result = formatUserData(mockUser);\n  expect(result).toMatchInlineSnapshot(`\n    {\n      \"email\": \"john@example.com\",\n      \"id\": \"1\",\n      \"name\": \"John Doe\"\n    }\n  `);\n});\n</code></pre>"},{"location":"best-practices/testing/#15-use-test-utilities-for-common-operations","title":"15. Use Test Utilities for Common Operations","text":"<pre><code>// Good - Test utilities\nconst TestUtils = {\n  async renderWithProviders(component: React.ReactElement) {\n    return render(\n      &lt;Provider store={store}&gt;\n        &lt;ThemeProvider theme={theme}&gt;\n          {component}\n        &lt;/ThemeProvider&gt;\n      &lt;/Provider&gt;\n    );\n  },\n\n  async waitForElement(selector: string) {\n    return waitFor(() =&gt; {\n      const element = document.querySelector(selector);\n      if (!element) throw new Error('Element not found');\n      return element;\n    });\n  }\n};\n</code></pre>"},{"location":"best-practices/testing/#16-use-performance-testing","title":"16. Use Performance Testing","text":"<pre><code>// Good - Performance testing\ndescribe('Performance', () =&gt; {\n  it('should process 1000 users under 1 second', async () =&gt; {\n    const start = performance.now();\n    await processUsers(largeUserList);\n    const end = performance.now();\n    expect(end - start).toBeLessThan(1000);\n  });\n});\n</code></pre>"},{"location":"best-practices/testing/#17-use-mutation-testing","title":"17. Use Mutation Testing","text":"<pre><code>// Good - Mutation testing setup\nmodule.exports = {\n  mutate: ['src/**/*.ts'],\n  testRunner: 'jest',\n  mutator: 'typescript',\n  reporters: ['html', 'clear-text', 'progress'],\n  coverageAnalysis: 'perTest'\n};\n</code></pre>"},{"location":"best-practices/type-system/","title":"TypeScript Type System Best Practices","text":""},{"location":"best-practices/type-system/#1-use-strict-type-checking","title":"1. Use Strict Type Checking","text":"<p>Always enable strict mode in your <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre>"},{"location":"best-practices/type-system/#2-type-inference","title":"2. Type Inference","text":"<p>Let TypeScript infer types when possible:</p> <pre><code>// Good\nconst name = \"John\";  // TypeScript infers string\n\n// Bad\nconst name: string = \"John\";  // Unnecessary type annotation\n</code></pre>"},{"location":"best-practices/type-system/#3-use-type-aliases-and-interfaces-appropriately","title":"3. Use Type Aliases and Interfaces Appropriately","text":"<p>Use interfaces for object shapes and type aliases for unions, primitives, and tuples:</p> <pre><code>// Good - Interface for object shape\ninterface User {\n  id: number;\n  name: string;\n}\n\n// Good - Type alias for union\ntype Status = 'active' | 'inactive' | 'pending';\n\n// Good - Type alias for tuple\ntype Point = [number, number];\n</code></pre>"},{"location":"best-practices/type-system/#4-avoid-using-any","title":"4. Avoid Using <code>any</code>","text":"<p>Use more specific types instead of <code>any</code>:</p> <pre><code>// Bad\nfunction processData(data: any) {\n  // ...\n}\n\n// Good\nfunction processData(data: unknown) {\n  if (typeof data === 'string') {\n    // ...\n  }\n}\n</code></pre>"},{"location":"best-practices/type-system/#5-use-generics-for-reusable-components","title":"5. Use Generics for Reusable Components","text":"<pre><code>// Good\nfunction identity&lt;T&gt;(value: T): T {\n  return value;\n}\n\n// Good\ninterface Response&lt;T&gt; {\n  data: T;\n  status: number;\n}\n</code></pre>"},{"location":"best-practices/type-system/#6-use-union-types-for-enums","title":"6. Use Union Types for Enums","text":"<p>Prefer union types over enums for better type safety:</p> <pre><code>// Good\ntype Direction = 'north' | 'south' | 'east' | 'west';\n\n// Bad\nenum Direction {\n  North,\n  South,\n  East,\n  West\n}\n</code></pre>"},{"location":"best-practices/type-system/#7-use-type-guards","title":"7. Use Type Guards","text":"<pre><code>// Good\nfunction isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\nfunction process(value: unknown) {\n  if (isString(value)) {\n    // value is now typed as string\n    console.log(value.toUpperCase());\n  }\n}\n</code></pre>"},{"location":"best-practices/type-system/#8-use-mapped-types","title":"8. Use Mapped Types","text":"<pre><code>// Good\ntype Readonly&lt;T&gt; = {\n  readonly [P in keyof T]: T[P];\n};\n\ntype Partial&lt;T&gt; = {\n  [P in keyof T]?: T[P];\n};\n</code></pre>"},{"location":"best-practices/type-system/#9-use-utility-types","title":"9. Use Utility Types","text":"<pre><code>// Good\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ntype UserPreview = Pick&lt;User, 'id' | 'name'&gt;;\ntype UserWithoutEmail = Omit&lt;User, 'email'&gt;;\n</code></pre>"},{"location":"best-practices/type-system/#10-use-const-assertions","title":"10. Use Const Assertions","text":"<pre><code>// Good\nconst colors = ['red', 'green', 'blue'] as const;\ntype Color = typeof colors[number];  // 'red' | 'green' | 'blue'\n</code></pre>"},{"location":"best-practices/type-system/#11-use-non-null-assertion-operator-sparingly","title":"11. Use Non-null Assertion Operator Sparingly","text":"<pre><code>// Bad\nfunction process(value: string | null) {\n  return value!.toUpperCase();\n}\n\n// Good\nfunction process(value: string | null) {\n  if (value === null) {\n    throw new Error('Value cannot be null');\n  }\n  return value.toUpperCase();\n}\n</code></pre>"},{"location":"best-practices/type-system/#12-use-type-predicates","title":"12. Use Type Predicates","text":"<pre><code>// Good\nfunction isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n\nfunction handleError(error: unknown) {\n  if (isError(error)) {\n    console.error(error.message);\n  }\n}\n</code></pre>"},{"location":"best-practices/type-system/#13-use-index-signatures-carefully","title":"13. Use Index Signatures Carefully","text":"<pre><code>// Good\ninterface StringMap {\n  [key: string]: string;\n}\n\n// Better - more specific\ninterface Config {\n  [key: string]: string | number | boolean;\n}\n</code></pre>"},{"location":"best-practices/type-system/#14-use-discriminated-unions","title":"14. Use Discriminated Unions","text":"<pre><code>// Good\ntype Shape =\n  | { kind: 'circle'; radius: number }\n  | { kind: 'square'; size: number }\n  | { kind: 'rectangle'; width: number; height: number };\n\nfunction area(shape: Shape): number {\n  switch (shape.kind) {\n    case 'circle':\n      return Math.PI * shape.radius ** 2;\n    case 'square':\n      return shape.size ** 2;\n    case 'rectangle':\n      return shape.width * shape.height;\n  }\n}\n</code></pre>"},{"location":"getting-started/first-program/","title":"Your First TypeScript Program","text":"<p>Now that you have TypeScript installed, let's write your first TypeScript program! We'll create a simple calculator application to demonstrate basic TypeScript concepts.</p>"},{"location":"getting-started/first-program/#setting-up-the-project","title":"Setting Up the Project","text":"<p>First, create a new directory for your project and initialize it:</p> <pre><code>mkdir typescript-calculator\ncd typescript-calculator\nnpm init -y\nnpm install typescript --save-dev\nnpx tsc --init\n</code></pre>"},{"location":"getting-started/first-program/#creating-the-source-files","title":"Creating the Source Files","text":"<p>Create a <code>src</code> directory and add a new file called <code>calculator.ts</code>:</p> <pre><code>// src/calculator.ts\n\n// Define a Calculator class\nclass Calculator {\n    // Add method with type annotations\n    add(a: number, b: number): number {\n        return a + b;\n    }\n\n    // Subtract method with type annotations\n    subtract(a: number, b: number): number {\n        return a - b;\n    }\n\n    // Multiply method with type annotations\n    multiply(a: number, b: number): number {\n        return a * b;\n    }\n\n    // Divide method with type annotations\n    divide(a: number, b: number): number {\n        if (b === 0) {\n            throw new Error(\"Cannot divide by zero\");\n        }\n        return a / b;\n    }\n}\n\n// Create an instance of the Calculator class\nconst calculator = new Calculator();\n\n// Test the calculator\nconsole.log(\"Addition: \", calculator.add(5, 3));      // Output: 8\nconsole.log(\"Subtraction: \", calculator.subtract(5, 3)); // Output: 2\nconsole.log(\"Multiplication: \", calculator.multiply(5, 3)); // Output: 15\nconsole.log(\"Division: \", calculator.divide(6, 2));    // Output: 3\n</code></pre>"},{"location":"getting-started/first-program/#compiling-and-running","title":"Compiling and Running","text":"<ol> <li>Compile the TypeScript code:</li> </ol> <pre><code>npx tsc\n</code></pre> <ol> <li>Run the compiled JavaScript:</li> </ol> <pre><code>node dist/calculator.js\n</code></pre>"},{"location":"getting-started/first-program/#understanding-the-code","title":"Understanding the Code","text":"<p>Let's break down what we've written:</p> <ol> <li> <p>Type Annotations: Notice how we specify types for parameters and return values:    <code>typescript    add(a: number, b: number): number</code></p> </li> <li> <p>Class Definition: We use the <code>class</code> keyword to define a class:    <code>typescript    class Calculator { ... }</code></p> </li> <li> <p>Error Handling: We include basic error handling for division by zero:    <code>typescript    if (b === 0) {        throw new Error(\"Cannot divide by zero\");    }</code></p> </li> </ol>"},{"location":"getting-started/first-program/#adding-more-features","title":"Adding More Features","text":"<p>Let's enhance our calculator with some additional features:</p> <pre><code>// src/calculator.ts\n\nclass Calculator {\n    // ... existing methods ...\n\n    // Calculate power\n    power(base: number, exponent: number): number {\n        return Math.pow(base, exponent);\n    }\n\n    // Calculate square root\n    squareRoot(x: number): number {\n        if (x &lt; 0) {\n            throw new Error(\"Cannot calculate square root of negative number\");\n        }\n        return Math.sqrt(x);\n    }\n\n    // Calculate factorial\n    factorial(n: number): number {\n        if (n &lt; 0) {\n            throw new Error(\"Cannot calculate factorial of negative number\");\n        }\n        if (n === 0 || n === 1) {\n            return 1;\n        }\n        return n * this.factorial(n - 1);\n    }\n}\n\n// Test the new features\nconsole.log(\"Power: \", calculator.power(2, 3));        // Output: 8\nconsole.log(\"Square Root: \", calculator.squareRoot(16)); // Output: 4\nconsole.log(\"Factorial: \", calculator.factorial(5));    // Output: 120\n</code></pre>"},{"location":"getting-started/first-program/#best-practices","title":"Best Practices","text":"<ol> <li>Type Safety: Always specify types for parameters and return values</li> <li>Error Handling: Include appropriate error handling</li> <li>Code Organization: Use classes to organize related functionality</li> <li>Documentation: Add comments to explain complex logic</li> </ol>"},{"location":"getting-started/first-program/#next-steps","title":"Next Steps","text":"<p>Now that you've written your first TypeScript program, you can: 1. Add more mathematical operations 2. Create a user interface for the calculator 3. Add unit tests 4. Explore more TypeScript features in the Basics section </p>"},{"location":"getting-started/installation/","title":"Installing TypeScript","text":"<p>This guide will walk you through setting up TypeScript in your development environment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing TypeScript, you need to have:</p> <ul> <li>Node.js (version 12 or higher)</li> <li>npm (Node Package Manager) or yarn</li> </ul> <p>You can check if you have these installed by running:</p> <pre><code>node --version\nnpm --version\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#global-installation","title":"Global Installation","text":"<p>To install TypeScript globally on your system:</p> <pre><code>npm install -g typescript\n</code></pre> <p>This will make the <code>tsc</code> command available globally.</p>"},{"location":"getting-started/installation/#project-specific-installation","title":"Project-specific Installation","text":"<p>For a project-specific installation (recommended):</p> <pre><code>npm init -y\nnpm install typescript --save-dev\n</code></pre> <p>This will: 1. Initialize a new npm project 2. Install TypeScript as a development dependency</p>"},{"location":"getting-started/installation/#setting-up-a-typescript-project","title":"Setting Up a TypeScript Project","text":""},{"location":"getting-started/installation/#initialize-typescript-configuration","title":"Initialize TypeScript Configuration","text":"<p>Create a <code>tsconfig.json</code> file:</p> <pre><code>npx tsc --init\n</code></pre> <p>This will create a <code>tsconfig.json</code> file with default settings. You can customize it based on your project needs.</p>"},{"location":"getting-started/installation/#basic-tsconfigjson","title":"Basic tsconfig.json","text":"<p>Here's a basic configuration to get started:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"getting-started/installation/#project-structure","title":"Project Structure","text":"<p>A typical TypeScript project structure looks like this:</p> <pre><code>project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 dist/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n</code></pre>"},{"location":"getting-started/installation/#running-typescript","title":"Running TypeScript","text":""},{"location":"getting-started/installation/#compiling-typescript","title":"Compiling TypeScript","text":"<p>To compile your TypeScript files:</p> <pre><code>npx tsc\n</code></pre> <p>This will compile all <code>.ts</code> files in your <code>src</code> directory to JavaScript in the <code>dist</code> directory.</p>"},{"location":"getting-started/installation/#watching-for-changes","title":"Watching for Changes","text":"<p>To automatically compile when files change:</p> <pre><code>npx tsc --watch\n</code></pre>"},{"location":"getting-started/installation/#ide-support","title":"IDE Support","text":""},{"location":"getting-started/installation/#visual-studio-code","title":"Visual Studio Code","text":"<p>VS Code has excellent TypeScript support out of the box. Install the following extensions for better experience:</p> <ul> <li>TypeScript and JavaScript Language Features</li> <li>ESLint</li> <li>Prettier</li> </ul>"},{"location":"getting-started/installation/#other-ides","title":"Other IDEs","text":"<p>Most modern IDEs support TypeScript: - WebStorm - Atom - Sublime Text - Vim/Neovim</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have TypeScript installed, you're ready to write your First TypeScript Program! </p>"},{"location":"getting-started/introduction/","title":"Introduction to TypeScript","text":"<p>TypeScript is a powerful programming language that builds on JavaScript by adding static type definitions. This guide will help you understand what TypeScript is, why it's useful, and how to get started with it.</p>"},{"location":"getting-started/introduction/#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is an open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.</p>"},{"location":"getting-started/introduction/#key-features","title":"Key Features","text":"<ol> <li>Static Typing: TypeScript adds static typing to JavaScript, which helps catch errors during development.</li> <li>Type Inference: TypeScript can infer types even when they're not explicitly declared.</li> <li>Interfaces and Classes: Support for object-oriented programming concepts.</li> <li>Generics: Support for generic programming.</li> <li>Modern JavaScript Features: Access to the latest JavaScript features while maintaining compatibility.</li> <li>Tooling Support: Excellent IDE support with features like autocompletion and refactoring.</li> </ol>"},{"location":"getting-started/introduction/#why-use-typescript","title":"Why Use TypeScript?","text":""},{"location":"getting-started/introduction/#benefits","title":"Benefits","text":"<ul> <li>Early Error Detection: Catch errors during development rather than at runtime</li> <li>Better Code Organization: Improved code structure and maintainability</li> <li>Enhanced IDE Support: Better autocompletion, refactoring, and documentation</li> <li>Improved Team Collaboration: Clear type definitions make code more understandable</li> <li>Scalability: Better suited for large-scale applications</li> </ul>"},{"location":"getting-started/introduction/#use-cases","title":"Use Cases","text":"<p>TypeScript is particularly useful for:</p> <ul> <li>Large-scale web applications</li> <li>Enterprise-level software development</li> <li>Projects requiring strong type safety</li> <li>Teams working on complex JavaScript applications</li> <li>Projects that need to scale over time</li> </ul>"},{"location":"getting-started/introduction/#typescript-vs-javascript","title":"TypeScript vs JavaScript","text":"<p>While JavaScript is a dynamically typed language, TypeScript adds static typing. Here's a quick comparison:</p> <pre><code>// JavaScript\nfunction add(a, b) {\n    return a + b;\n}\n\n// TypeScript\nfunction add(a: number, b: number): number {\n    return a + b;\n}\n</code></pre> <p>The TypeScript version: - Explicitly declares parameter types - Specifies the return type - Provides better error checking - Offers better IDE support</p>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>To start using TypeScript, you'll need to:</p> <ol> <li>Install Node.js and npm</li> <li>Install TypeScript globally or in your project</li> <li>Set up a TypeScript configuration file</li> <li>Write your first TypeScript program</li> </ol> <p>Let's move on to the Installation section to get your development environment set up! </p>"}]}